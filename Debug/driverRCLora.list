
driverRCLora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d60  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006e70  08006e70  00007e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eb0  08006eb0  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  08006eb0  08006eb0  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006eb0  08006eb0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eb0  08006eb0  00007eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006eb4  08006eb4  00007eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006eb8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000060  08006f18  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08006f18  000083ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efb8  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e5  00000000  00000000  00017041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00019328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b58  00000000  00000000  0001a178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018517  00000000  00000000  0001acd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010719  00000000  00000000  000331e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff99  00000000  00000000  00043900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3899  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e88  00000000  00000000  000d38dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d7764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e58 	.word	0x08006e58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006e58 	.word	0x08006e58

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	@ 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bfa:	2afd      	cmp	r2, #253	@ 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	@ 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	@ 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	@ 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2iz>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f3c:	d30f      	bcc.n	8000f5e <__aeabi_f2iz+0x2a>
 8000f3e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d90d      	bls.n	8000f64 <__aeabi_f2iz+0x30>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f50:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	bf18      	it	ne
 8000f5a:	4240      	negne	r0, r0
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr
 8000f64:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f68:	d101      	bne.n	8000f6e <__aeabi_f2iz+0x3a>
 8000f6a:	0242      	lsls	r2, r0, #9
 8000f6c:	d105      	bne.n	8000f7a <__aeabi_f2iz+0x46>
 8000f6e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f72:	bf08      	it	eq
 8000f74:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr

08000f80 <map>:
 * @param in_max The upper bound of the input range.
 * @param out_min The lower bound of the output range.
 * @param out_max The upper bound of the output range.
 * @return The mapped value.
 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	69b9      	ldr	r1, [r7, #24]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	1a8a      	subs	r2, r1, r2
 8000f9a:	fb03 f202 	mul.w	r2, r3, r2
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	1acb      	subs	r3, r1, r3
 8000fa4:	fb92 f2f3 	sdiv	r2, r2, r3
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	4413      	add	r3, r2
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <mapf>:
 * @param in_max The upper bound of the input range.
 * @param out_min The lower bound of the output range.
 * @param out_max The upper bound of the output range.
 * @return The mapped floating-point value.
 */
float mapf(float x, float in_min, float in_max, float out_min, float out_max) {
 8000fb6:	b590      	push	{r4, r7, lr}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f7ff fce4 	bl	8000994 <__aeabi_fsub>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	461c      	mov	r4, r3
 8000fd0:	6839      	ldr	r1, [r7, #0]
 8000fd2:	6a38      	ldr	r0, [r7, #32]
 8000fd4:	f7ff fcde 	bl	8000994 <__aeabi_fsub>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f7ff fde3 	bl	8000ba8 <__aeabi_fmul>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	461c      	mov	r4, r3
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff fcd3 	bl	8000994 <__aeabi_fsub>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f7ff fe8c 	bl	8000d10 <__aeabi_fdiv>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	6839      	ldr	r1, [r7, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fccb 	bl	8000998 <__addsf3>
 8001002:	4603      	mov	r3, r0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}

0800100c <ComputePIDadpt>:

float ComputePIDadpt(volatile PID_t *pid, const float measuredValue, const float dt) {
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b08b      	sub	sp, #44	@ 0x2c
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	// Calculate error
	float error = pid->setPoint - measuredValue;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fcb8 	bl	8000994 <__aeabi_fsub>
 8001024:	4603      	mov	r3, r0
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24

	// Deadband (Optional: Prevents small oscillations)
	if (fabsf(error) < pid->deadband) {
 8001028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001032:	4619      	mov	r1, r3
 8001034:	4610      	mov	r0, r2
 8001036:	f7ff ff55 	bl	8000ee4 <__aeabi_fcmplt>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <ComputePIDadpt+0x3a>
		error = 0.0f;
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	// Proportional term
	float Pout = pid->Kp * error;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4619      	mov	r1, r3
 800104c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800104e:	f7ff fdab 	bl	8000ba8 <__aeabi_fmul>
 8001052:	4603      	mov	r3, r0
 8001054:	617b      	str	r3, [r7, #20]

	// Integral term (PI and PID modes)
	float Iout = 0.0f;
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
	if ((pid->Ki > 0.0f)) {
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f04f 0100 	mov.w	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff5b 	bl	8000f20 <__aeabi_fcmpgt>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d018      	beq.n	80010a2 <ComputePIDadpt+0x96>
		pid->integral += error * dt;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	695c      	ldr	r4, [r3, #20]
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001078:	f7ff fd96 	bl	8000ba8 <__aeabi_fmul>
 800107c:	4603      	mov	r3, r0
 800107e:	4619      	mov	r1, r3
 8001080:	4620      	mov	r0, r4
 8001082:	f7ff fc89 	bl	8000998 <__addsf3>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	615a      	str	r2, [r3, #20]
		Iout = pid->Ki * pid->integral;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4619      	mov	r1, r3
 8001098:	4610      	mov	r0, r2
 800109a:	f7ff fd85 	bl	8000ba8 <__aeabi_fmul>
 800109e:	4603      	mov	r3, r0
 80010a0:	623b      	str	r3, [r7, #32]

	}

	// Derivative term (PD and PID modes)
	float Dout = 0.0f;
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
	if ((pid->Kd > 0.0f)) {
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	f04f 0100 	mov.w	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff35 	bl	8000f20 <__aeabi_fcmpgt>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d014      	beq.n	80010e6 <ComputePIDadpt+0xda>
		float derivative = (error - pid->prevError) / dt;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	4619      	mov	r1, r3
 80010c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010c4:	f7ff fc66 	bl	8000994 <__aeabi_fsub>
 80010c8:	4603      	mov	r3, r0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fe1f 	bl	8000d10 <__aeabi_fdiv>
 80010d2:	4603      	mov	r3, r0
 80010d4:	613b      	str	r3, [r7, #16]
		Dout = pid->Kd * derivative;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	4619      	mov	r1, r3
 80010dc:	6938      	ldr	r0, [r7, #16]
 80010de:	f7ff fd63 	bl	8000ba8 <__aeabi_fmul>
 80010e2:	4603      	mov	r3, r0
 80010e4:	61fb      	str	r3, [r7, #28]
	}

	// Compute total output
	float output = Pout + Iout + Dout;
 80010e6:	6a39      	ldr	r1, [r7, #32]
 80010e8:	6978      	ldr	r0, [r7, #20]
 80010ea:	f7ff fc55 	bl	8000998 <__addsf3>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4619      	mov	r1, r3
 80010f2:	69f8      	ldr	r0, [r7, #28]
 80010f4:	f7ff fc50 	bl	8000998 <__addsf3>
 80010f8:	4603      	mov	r3, r0
 80010fa:	61bb      	str	r3, [r7, #24]

	// Apply output limits
	if (output > pid->maxOutput - pid->minOutput) {
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	4619      	mov	r1, r3
 8001106:	4610      	mov	r0, r2
 8001108:	f7ff fc44 	bl	8000994 <__aeabi_fsub>
 800110c:	4603      	mov	r3, r0
 800110e:	4619      	mov	r1, r3
 8001110:	69b8      	ldr	r0, [r7, #24]
 8001112:	f7ff ff05 	bl	8000f20 <__aeabi_fcmpgt>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00e      	beq.n	800113a <ComputePIDadpt+0x12e>
		pid->integral = pid->lastIntegral;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699a      	ldr	r2, [r3, #24]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	615a      	str	r2, [r3, #20]
		output = pid->maxOutput - pid->minOutput;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4619      	mov	r1, r3
 800112e:	4610      	mov	r0, r2
 8001130:	f7ff fc30 	bl	8000994 <__aeabi_fsub>
 8001134:	4603      	mov	r3, r0
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	e003      	b.n	8001142 <ComputePIDadpt+0x136>
	} else {
		pid->lastIntegral = pid->integral;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	695a      	ldr	r2, [r3, #20]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	619a      	str	r2, [r3, #24]
	}
	if (output < 0)
 8001142:	f04f 0100 	mov.w	r1, #0
 8001146:	69b8      	ldr	r0, [r7, #24]
 8001148:	f7ff fecc 	bl	8000ee4 <__aeabi_fcmplt>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <ComputePIDadpt+0x14c>
		output = 0;
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]

	// Store values for next iteration
	pid->prevError = error;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800115c:	611a      	str	r2, [r3, #16]

	return output + pid->minOutput;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	69b9      	ldr	r1, [r7, #24]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fc17 	bl	8000998 <__addsf3>
 800116a:	4603      	mov	r3, r0
}
 800116c:	4618      	mov	r0, r3
 800116e:	372c      	adds	r7, #44	@ 0x2c
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}

08001174 <mootorSpeed>:

void mootorSpeed(int16_t _speed) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
	if (_speed > motorSpeedMax) {
 800117e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001182:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001186:	dd02      	ble.n	800118e <mootorSpeed+0x1a>
		_speed = motorSpeedMax;
 8001188:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800118c:	80fb      	strh	r3, [r7, #6]
	}
	if (_speed < motorSpeedMin) {
 800118e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001192:	f513 6ffa 	cmn.w	r3, #2000	@ 0x7d0
 8001196:	da02      	bge.n	800119e <mootorSpeed+0x2a>
		_speed = motorSpeedMin;
 8001198:	f64f 0330 	movw	r3, #63536	@ 0xf830
 800119c:	80fb      	strh	r3, [r7, #6]
	}

	if (_speed > 0) {
 800119e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	dd07      	ble.n	80011b6 <mootorSpeed+0x42>
		motorMode = mMode_For;
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <mootorSpeed+0x78>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
		Speed = _speed;
 80011ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b0:	4a0f      	ldr	r2, [pc, #60]	@ (80011f0 <mootorSpeed+0x7c>)
 80011b2:	6013      	str	r3, [r2, #0]
//		} else if (mSVelocity < brakeThrshldLow) {
			Speed = 0;
			motorMode = mMode_Stop;
//		}
	}
}
 80011b4:	e015      	b.n	80011e2 <mootorSpeed+0x6e>
	} else if (_speed < 0) {
 80011b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	da07      	bge.n	80011ce <mootorSpeed+0x5a>
		motorMode = mMode_back;
 80011be:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <mootorSpeed+0x78>)
 80011c0:	2202      	movs	r2, #2
 80011c2:	701a      	strb	r2, [r3, #0]
		Speed = _speed;
 80011c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c8:	4a09      	ldr	r2, [pc, #36]	@ (80011f0 <mootorSpeed+0x7c>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	e009      	b.n	80011e2 <mootorSpeed+0x6e>
	} else if (_speed == 0) {
 80011ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d105      	bne.n	80011e2 <mootorSpeed+0x6e>
			Speed = 0;
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <mootorSpeed+0x7c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
			motorMode = mMode_Stop;
 80011dc:	4b03      	ldr	r3, [pc, #12]	@ (80011ec <mootorSpeed+0x78>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	200000b8 	.word	0x200000b8
 80011f0:	200000b4 	.word	0x200000b4

080011f4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	if (htim == &htim4) { //timer 100hz
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a4c      	ldr	r2, [pc, #304]	@ (8001330 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001200:	4293      	cmp	r3, r2
 8001202:	f040 8091 	bne.w	8001328 <HAL_TIM_PeriodElapsedCallback+0x134>
		uint32_t currCNT = TIM3->CNT;
 8001206:	4b4b      	ldr	r3, [pc, #300]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120a:	60fb      	str	r3, [r7, #12]
		int32_t delta = (int32_t) (currCNT - lastCNT); // menghindari overflow/underflow
 800120c:	4b4a      	ldr	r3, [pc, #296]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	60bb      	str	r3, [r7, #8]
		lastCNT = currCNT;
 8001216:	4a48      	ldr	r2, [pc, #288]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6013      	str	r3, [r2, #0]
		dump1 = (float) delta / -28.0f;
 800121c:	68b8      	ldr	r0, [r7, #8]
 800121e:	f7ff fc6f 	bl	8000b00 <__aeabi_i2f>
 8001222:	4603      	mov	r3, r0
 8001224:	4945      	ldr	r1, [pc, #276]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fd72 	bl	8000d10 <__aeabi_fdiv>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b43      	ldr	r3, [pc, #268]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001232:	601a      	str	r2, [r3, #0]
		rps = dump1 / 0.01f;
 8001234:	4b42      	ldr	r3, [pc, #264]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4942      	ldr	r1, [pc, #264]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fd68 	bl	8000d10 <__aeabi_fdiv>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b40      	ldr	r3, [pc, #256]	@ (8001348 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001246:	601a      	str	r2, [r3, #0]
		rpmMotor = rps * 60.0f;
 8001248:	4b3f      	ldr	r3, [pc, #252]	@ (8001348 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	493f      	ldr	r1, [pc, #252]	@ (800134c <HAL_TIM_PeriodElapsedCallback+0x158>)
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fcaa 	bl	8000ba8 <__aeabi_fmul>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	4b3d      	ldr	r3, [pc, #244]	@ (8001350 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800125a:	601a      	str	r2, [r3, #0]
		rpsWheel = rps / 10.28f;
 800125c:	4b3a      	ldr	r3, [pc, #232]	@ (8001348 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	493c      	ldr	r1, [pc, #240]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fd54 	bl	8000d10 <__aeabi_fdiv>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b3a      	ldr	r3, [pc, #232]	@ (8001358 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800126e:	601a      	str	r2, [r3, #0]
		mmSVelocity = rpsWheel * 329.86722f;
 8001270:	4b39      	ldr	r3, [pc, #228]	@ (8001358 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4939      	ldr	r1, [pc, #228]	@ (800135c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fc96 	bl	8000ba8 <__aeabi_fmul>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	4b37      	ldr	r3, [pc, #220]	@ (8001360 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001282:	601a      	str	r2, [r3, #0]
		mSVelocity = mmSVelocity / 1000.0f;
 8001284:	4b36      	ldr	r3, [pc, #216]	@ (8001360 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4936      	ldr	r1, [pc, #216]	@ (8001364 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fd40 	bl	8000d10 <__aeabi_fdiv>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	4b34      	ldr	r3, [pc, #208]	@ (8001368 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001296:	601a      	str	r2, [r3, #0]

		if (PID.setPoint == 0.0f) {
 8001298:	4b34      	ldr	r3, [pc, #208]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x178>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f04f 0100 	mov.w	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fe15 	bl	8000ed0 <__aeabi_fcmpeq>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00f      	beq.n	80012cc <HAL_TIM_PeriodElapsedCallback+0xd8>
			PID.integral = 0.0f;
 80012ac:	4b2f      	ldr	r3, [pc, #188]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x178>)
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
			PID.prevError = 0.0f;
 80012b4:	4b2d      	ldr	r3, [pc, #180]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x178>)
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
			PID.lastIntegral = 0.0f;
 80012bc:	4b2b      	ldr	r3, [pc, #172]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x178>)
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
			mootorSpeed(0);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff ff55 	bl	8001174 <mootorSpeed>
			}

//			mootorSpeed((int16_t)ComputePIDadpt(&PID, mSVelocity, 0.01f));
		}
	}
}
 80012ca:	e02d      	b.n	8001328 <HAL_TIM_PeriodElapsedCallback+0x134>
			if (receivedDataControl.dummy) {
 80012cc:	4b28      	ldr	r3, [pc, #160]	@ (8001370 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80012ce:	795b      	ldrb	r3, [r3, #5]
 80012d0:	f003 030f 	and.w	r3, r3, #15
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d016      	beq.n	8001308 <HAL_TIM_PeriodElapsedCallback+0x114>
				mootorSpeed(-(int16_t)ComputePIDadpt(&PID, -mSVelocity, 0.01f));
 80012da:	4b23      	ldr	r3, [pc, #140]	@ (8001368 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80012e2:	4a18      	ldr	r2, [pc, #96]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80012e4:	4619      	mov	r1, r3
 80012e6:	4821      	ldr	r0, [pc, #132]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x178>)
 80012e8:	f7ff fe90 	bl	800100c <ComputePIDadpt>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fe20 	bl	8000f34 <__aeabi_f2iz>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	425b      	negs	r3, r3
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	b21b      	sxth	r3, r3
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff37 	bl	8001174 <mootorSpeed>
}
 8001306:	e00f      	b.n	8001328 <HAL_TIM_PeriodElapsedCallback+0x134>
				mootorSpeed((int16_t) ComputePIDadpt(&PID, mSVelocity, 0.01f));
 8001308:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0d      	ldr	r2, [pc, #52]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800130e:	4619      	mov	r1, r3
 8001310:	4816      	ldr	r0, [pc, #88]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001312:	f7ff fe7b 	bl	800100c <ComputePIDadpt>
 8001316:	4603      	mov	r3, r0
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fe0b 	bl	8000f34 <__aeabi_f2iz>
 800131e:	4603      	mov	r3, r0
 8001320:	b21b      	sxth	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff26 	bl	8001174 <mootorSpeed>
}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000248 	.word	0x20000248
 8001334:	40000400 	.word	0x40000400
 8001338:	200000e0 	.word	0x200000e0
 800133c:	c1e00000 	.word	0xc1e00000
 8001340:	200000f8 	.word	0x200000f8
 8001344:	3c23d70a 	.word	0x3c23d70a
 8001348:	200000f4 	.word	0x200000f4
 800134c:	42700000 	.word	0x42700000
 8001350:	200000e4 	.word	0x200000e4
 8001354:	41247ae1 	.word	0x41247ae1
 8001358:	200000e8 	.word	0x200000e8
 800135c:	43a4ef01 	.word	0x43a4ef01
 8001360:	200000ec 	.word	0x200000ec
 8001364:	447a0000 	.word	0x447a0000
 8001368:	200000f0 	.word	0x200000f0
 800136c:	2000000c 	.word	0x2000000c
 8001370:	20000044 	.word	0x20000044

08001374 <motorLOOP>:

void motorLOOP(void) {
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
//	} else{
//		motorMode = mMode_Stop;
//	}


	switch (motorMode) {
 8001378:	4b30      	ldr	r3, [pc, #192]	@ (800143c <motorLOOP+0xc8>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b05      	cmp	r3, #5
 800137e:	d858      	bhi.n	8001432 <motorLOOP+0xbe>
 8001380:	a201      	add	r2, pc, #4	@ (adr r2, 8001388 <motorLOOP+0x14>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	080013a1 	.word	0x080013a1
 800138c:	080013bf 	.word	0x080013bf
 8001390:	080013e7 	.word	0x080013e7
 8001394:	08001431 	.word	0x08001431
 8001398:	08001431 	.word	0x08001431
 800139c:	0800140f 	.word	0x0800140f
	case mMode_Stop:
		val_pwmRED = 0;
 80013a0:	4b27      	ldr	r3, [pc, #156]	@ (8001440 <motorLOOP+0xcc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
		val_pwmBLACK = 0;
 80013a6:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <motorLOOP+0xd0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

		clrIO(enBLACK_GPIO_Port,enBLACK_Pin);
 80013ac:	4b26      	ldr	r3, [pc, #152]	@ (8001448 <motorLOOP+0xd4>)
 80013ae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013b2:	615a      	str	r2, [r3, #20]
		clrIO(enRED_GPIO_Port,enRED_Pin);
 80013b4:	4b24      	ldr	r3, [pc, #144]	@ (8001448 <motorLOOP+0xd4>)
 80013b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013ba:	615a      	str	r2, [r3, #20]
		break;
 80013bc:	e039      	b.n	8001432 <motorLOOP+0xbe>
	case mMode_For:
		val_pwmRED = abs(Speed);
 80013be:	4b23      	ldr	r3, [pc, #140]	@ (800144c <motorLOOP+0xd8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	bfb8      	it	lt
 80013c6:	425b      	neglt	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <motorLOOP+0xcc>)
 80013cc:	601a      	str	r2, [r3, #0]
		val_pwmBLACK = 0;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <motorLOOP+0xd0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]

		setIO(enBLACK_GPIO_Port, enBLACK_Pin);
 80013d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001448 <motorLOOP+0xd4>)
 80013d6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013da:	611a      	str	r2, [r3, #16]
		setIO(enRED_GPIO_Port, enRED_Pin);
 80013dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001448 <motorLOOP+0xd4>)
 80013de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013e2:	611a      	str	r2, [r3, #16]
		break;
 80013e4:	e025      	b.n	8001432 <motorLOOP+0xbe>
	case mMode_back:
		val_pwmRED = 0;
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <motorLOOP+0xcc>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
		val_pwmBLACK = abs(Speed);
 80013ec:	4b17      	ldr	r3, [pc, #92]	@ (800144c <motorLOOP+0xd8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bfb8      	it	lt
 80013f4:	425b      	neglt	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <motorLOOP+0xd0>)
 80013fa:	601a      	str	r2, [r3, #0]

		setIO(enBLACK_GPIO_Port, enBLACK_Pin);
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <motorLOOP+0xd4>)
 80013fe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001402:	611a      	str	r2, [r3, #16]
		setIO(enRED_GPIO_Port, enRED_Pin);
 8001404:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <motorLOOP+0xd4>)
 8001406:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800140a:	611a      	str	r2, [r3, #16]
		break;
 800140c:	e011      	b.n	8001432 <motorLOOP+0xbe>
		break;
	case mMode_deAcsBack2stop:

		break;
	case mMode_breaking:
		val_pwmRED = breakingPower;
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <motorLOOP+0xdc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a0b      	ldr	r2, [pc, #44]	@ (8001440 <motorLOOP+0xcc>)
 8001414:	6013      	str	r3, [r2, #0]
		val_pwmBLACK = breakingPower;
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <motorLOOP+0xdc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <motorLOOP+0xd0>)
 800141c:	6013      	str	r3, [r2, #0]

		setIO(enBLACK_GPIO_Port, enBLACK_Pin);
 800141e:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <motorLOOP+0xd4>)
 8001420:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001424:	611a      	str	r2, [r3, #16]
		setIO(enRED_GPIO_Port, enRED_Pin);
 8001426:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <motorLOOP+0xd4>)
 8001428:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800142c:	611a      	str	r2, [r3, #16]
		break;
 800142e:	e000      	b.n	8001432 <motorLOOP+0xbe>
		break;
 8001430:	bf00      	nop
	}
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	200000b8 	.word	0x200000b8
 8001440:	20000000 	.word	0x20000000
 8001444:	20000004 	.word	0x20000004
 8001448:	40010c00 	.word	0x40010c00
 800144c:	200000b4 	.word	0x200000b4
 8001450:	20000050 	.word	0x20000050
 8001454:	00000000 	.word	0x00000000

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145e:	f001 fb29 	bl	8002ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001462:	f000 f957 	bl	8001714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001466:	f000 fc39 	bl	8001cdc <MX_GPIO_Init>
  MX_DMA_Init();
 800146a:	f000 fbf9 	bl	8001c60 <MX_DMA_Init>
  MX_TIM1_Init();
 800146e:	f000 fa09 	bl	8001884 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001472:	f000 fab3 	bl	80019dc <MX_TIM2_Init>
  MX_ADC1_Init();
 8001476:	f000 f9a9 	bl	80017cc <MX_ADC1_Init>
  MX_TIM4_Init();
 800147a:	f000 fb79 	bl	8001b70 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800147e:	f000 fbc5 	bl	8001c0c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001482:	f000 fb21 	bl	8001ac8 <MX_TIM3_Init>
//  	do{
//  		ADXL_Read(DEVID_REG, &devID, 1);
//  		HAL_Delay(10);
//  	}while(devID != 0xE5);

	for (int i = 0; i < 5; ++i) {
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	e026      	b.n	80014da <main+0x82>
		setIO(ledA_GPIO_Port, ledA_Pin);
 800148c:	4b8a      	ldr	r3, [pc, #552]	@ (80016b8 <main+0x260>)
 800148e:	2208      	movs	r2, #8
 8001490:	611a      	str	r2, [r3, #16]
		HAL_Delay(50);
 8001492:	2032      	movs	r0, #50	@ 0x32
 8001494:	f001 fb70 	bl	8002b78 <HAL_Delay>
		clrIO(ledA_GPIO_Port, ledA_Pin);
 8001498:	4b87      	ldr	r3, [pc, #540]	@ (80016b8 <main+0x260>)
 800149a:	2208      	movs	r2, #8
 800149c:	615a      	str	r2, [r3, #20]
		HAL_Delay(50);
 800149e:	2032      	movs	r0, #50	@ 0x32
 80014a0:	f001 fb6a 	bl	8002b78 <HAL_Delay>

		setIO(ledB_GPIO_Port, ledB_Pin);
 80014a4:	4b84      	ldr	r3, [pc, #528]	@ (80016b8 <main+0x260>)
 80014a6:	2210      	movs	r2, #16
 80014a8:	611a      	str	r2, [r3, #16]
		HAL_Delay(50);
 80014aa:	2032      	movs	r0, #50	@ 0x32
 80014ac:	f001 fb64 	bl	8002b78 <HAL_Delay>
		clrIO(ledB_GPIO_Port, ledB_Pin);
 80014b0:	4b81      	ldr	r3, [pc, #516]	@ (80016b8 <main+0x260>)
 80014b2:	2210      	movs	r2, #16
 80014b4:	615a      	str	r2, [r3, #20]
		HAL_Delay(50);
 80014b6:	2032      	movs	r0, #50	@ 0x32
 80014b8:	f001 fb5e 	bl	8002b78 <HAL_Delay>

		setIO(ledC_GPIO_Port, ledC_Pin);
 80014bc:	4b7e      	ldr	r3, [pc, #504]	@ (80016b8 <main+0x260>)
 80014be:	2220      	movs	r2, #32
 80014c0:	611a      	str	r2, [r3, #16]
		HAL_Delay(50);
 80014c2:	2032      	movs	r0, #50	@ 0x32
 80014c4:	f001 fb58 	bl	8002b78 <HAL_Delay>
		clrIO(ledC_GPIO_Port, ledC_Pin);
 80014c8:	4b7b      	ldr	r3, [pc, #492]	@ (80016b8 <main+0x260>)
 80014ca:	2220      	movs	r2, #32
 80014cc:	615a      	str	r2, [r3, #20]
		HAL_Delay(50);
 80014ce:	2032      	movs	r0, #50	@ 0x32
 80014d0:	f001 fb52 	bl	8002b78 <HAL_Delay>
	for (int i = 0; i < 5; ++i) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3301      	adds	r3, #1
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b04      	cmp	r3, #4
 80014de:	ddd5      	ble.n	800148c <main+0x34>
//
//	ADXL_Write(POWER_CTL_REG, (uint8_t*)0b00001000); // Mesuring Mode
//	HAL_Delay(50);


  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, &val_pwmRED, 1);
 80014e0:	2301      	movs	r3, #1
 80014e2:	4a76      	ldr	r2, [pc, #472]	@ (80016bc <main+0x264>)
 80014e4:	2100      	movs	r1, #0
 80014e6:	4876      	ldr	r0, [pc, #472]	@ (80016c0 <main+0x268>)
 80014e8:	f003 fba6 	bl	8004c38 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, &val_pwmBLACK, 1);
 80014ec:	2301      	movs	r3, #1
 80014ee:	4a75      	ldr	r2, [pc, #468]	@ (80016c4 <main+0x26c>)
 80014f0:	2108      	movs	r1, #8
 80014f2:	4873      	ldr	r0, [pc, #460]	@ (80016c0 <main+0x268>)
 80014f4:	f003 fba0 	bl	8004c38 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, &val_pwmSERVO, 1);
 80014f8:	2301      	movs	r3, #1
 80014fa:	4a73      	ldr	r2, [pc, #460]	@ (80016c8 <main+0x270>)
 80014fc:	2104      	movs	r1, #4
 80014fe:	4873      	ldr	r0, [pc, #460]	@ (80016cc <main+0x274>)
 8001500:	f003 fb9a 	bl	8004c38 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim4);
 8001504:	4872      	ldr	r0, [pc, #456]	@ (80016d0 <main+0x278>)
 8001506:	f003 faed 	bl	8004ae4 <HAL_TIM_Base_Start_IT>

  HAL_ADCEx_Calibration_Start(&hadc1);
 800150a:	4872      	ldr	r0, [pc, #456]	@ (80016d4 <main+0x27c>)
 800150c:	f001 ff24 	bl	8003358 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, valADC, totalADC);
 8001510:	2203      	movs	r2, #3
 8001512:	4971      	ldr	r1, [pc, #452]	@ (80016d8 <main+0x280>)
 8001514:	486f      	ldr	r0, [pc, #444]	@ (80016d4 <main+0x27c>)
 8001516:	f001 fc2b 	bl	8002d70 <HAL_ADC_Start_DMA>

//  HAL_UArt_
//  HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
//  LL_
  HAL_UART_Receive_DMA(&huart1, rx_DMA_buff_LoRa, 6);
 800151a:	2206      	movs	r2, #6
 800151c:	496f      	ldr	r1, [pc, #444]	@ (80016dc <main+0x284>)
 800151e:	4870      	ldr	r0, [pc, #448]	@ (80016e0 <main+0x288>)
 8001520:	f004 fda9 	bl	8006076 <HAL_UART_Receive_DMA>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001524:	213c      	movs	r1, #60	@ 0x3c
 8001526:	486f      	ldr	r0, [pc, #444]	@ (80016e4 <main+0x28c>)
 8001528:	f003 fdca 	bl	80050c0 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
		if (sendTXbuff) {
 800152c:	4b6e      	ldr	r3, [pc, #440]	@ (80016e8 <main+0x290>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <main+0xe2>
			sendTXbuff = 0;
 8001534:	4b6c      	ldr	r3, [pc, #432]	@ (80016e8 <main+0x290>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
//			HAL_UART_Transmit(&huart3, tx_buffIMU, 3, 100);
		}

		uint32_t currTime = HAL_GetTick();
 800153a:	f001 fb13 	bl	8002b64 <HAL_GetTick>
 800153e:	6038      	str	r0, [r7, #0]
		if (currTime - kHzLoop >1) {
 8001540:	4b6a      	ldr	r3, [pc, #424]	@ (80016ec <main+0x294>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b01      	cmp	r3, #1
 800154a:	d90e      	bls.n	800156a <main+0x112>


//			mootorSpeed(speedTest);
			motorLOOP();
 800154c:	f7ff ff12 	bl	8001374 <motorLOOP>



			if (currTime - rxTime > rxTimeout) {
 8001550:	4b67      	ldr	r3, [pc, #412]	@ (80016f0 <main+0x298>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800155e:	d904      	bls.n	800156a <main+0x112>
//				HAL_TIM_StateTypeDef temp =HAL_TIM_PWM_GetState(&htim2);
//				HAL_UART_AbortReceive_IT(&huart1);
//				HAL_Delay(50);
//				HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
				retrying++;
 8001560:	4b64      	ldr	r3, [pc, #400]	@ (80016f4 <main+0x29c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	4a63      	ldr	r2, [pc, #396]	@ (80016f4 <main+0x29c>)
 8001568:	6013      	str	r3, [r2, #0]
//					HAL_UART_Receive_DMA(&huart3, rx_buff_IMU, dmaBufSize);
//				}
			}
		}

		if (currTime - slowLoop > 100) {
 800156a:	4b63      	ldr	r3, [pc, #396]	@ (80016f8 <main+0x2a0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	@ 0x64
 8001574:	d9da      	bls.n	800152c <main+0xd4>
//
//				// Convert to km/h
//				velocity_kmh = velocity_mps * 3.6f;
//			}

			slowLoop = currTime;
 8001576:	4a60      	ldr	r2, [pc, #384]	@ (80016f8 <main+0x2a0>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	6013      	str	r3, [r2, #0]

			//________________ ADC CAOMPUTING __________________________________
			ADCvalue.Vref = (float) ((V_REF_INT * 4095.0) / valADC[0]);
 800157c:	4b56      	ldr	r3, [pc, #344]	@ (80016d8 <main+0x280>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ff27 	bl	80003d4 <__aeabi_ui2d>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	a145      	add	r1, pc, #276	@ (adr r1, 80016a0 <main+0x248>)
 800158c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001590:	f7ff f8c4 	bl	800071c <__aeabi_ddiv>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	f7ff f9a6 	bl	80008ec <__aeabi_d2f>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4a56      	ldr	r2, [pc, #344]	@ (80016fc <main+0x2a4>)
 80015a4:	6013      	str	r3, [r2, #0]
			ADCvalue.Vtemp = (float) (valADC[1] * ADCvalue.Vref) / 4095.0;
 80015a6:	4b4c      	ldr	r3, [pc, #304]	@ (80016d8 <main+0x280>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff faa4 	bl	8000af8 <__aeabi_ui2f>
 80015b0:	4602      	mov	r2, r0
 80015b2:	4b52      	ldr	r3, [pc, #328]	@ (80016fc <main+0x2a4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4619      	mov	r1, r3
 80015b8:	4610      	mov	r0, r2
 80015ba:	f7ff faf5 	bl	8000ba8 <__aeabi_fmul>
 80015be:	4603      	mov	r3, r0
 80015c0:	494f      	ldr	r1, [pc, #316]	@ (8001700 <main+0x2a8>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fba4 	bl	8000d10 <__aeabi_fdiv>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b4b      	ldr	r3, [pc, #300]	@ (80016fc <main+0x2a4>)
 80015ce:	609a      	str	r2, [r3, #8]
			ADCvalue.temp = (((V_AT_25C - ADCvalue.Vtemp) * 1000.0)
 80015d0:	4b4a      	ldr	r3, [pc, #296]	@ (80016fc <main+0x2a4>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	4619      	mov	r1, r3
 80015d6:	484b      	ldr	r0, [pc, #300]	@ (8001704 <main+0x2ac>)
 80015d8:	f7ff f9dc 	bl	8000994 <__aeabi_fsub>
 80015dc:	4603      	mov	r3, r0
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ff1a 	bl	8000418 <__aeabi_f2d>
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	4b47      	ldr	r3, [pc, #284]	@ (8001708 <main+0x2b0>)
 80015ea:	f7fe ff6d 	bl	80004c8 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
					/ AVG_SLOPE) + 25.0;
 80015f6:	a32c      	add	r3, pc, #176	@ (adr r3, 80016a8 <main+0x250>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7ff f88e 	bl	800071c <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b3f      	ldr	r3, [pc, #252]	@ (800170c <main+0x2b4>)
 800160e:	f7fe fda5 	bl	800015c <__adddf3>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff f967 	bl	80008ec <__aeabi_d2f>
 800161e:	4603      	mov	r3, r0
			ADCvalue.temp = (((V_AT_25C - ADCvalue.Vtemp) * 1000.0)
 8001620:	4a36      	ldr	r2, [pc, #216]	@ (80016fc <main+0x2a4>)
 8001622:	6053      	str	r3, [r2, #4]
			ADCvalue.Vamp = (float) (valADC[2] * ADCvalue.Vref) / 4095.0;
 8001624:	4b2c      	ldr	r3, [pc, #176]	@ (80016d8 <main+0x280>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fa65 	bl	8000af8 <__aeabi_ui2f>
 800162e:	4602      	mov	r2, r0
 8001630:	4b32      	ldr	r3, [pc, #200]	@ (80016fc <main+0x2a4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	4610      	mov	r0, r2
 8001638:	f7ff fab6 	bl	8000ba8 <__aeabi_fmul>
 800163c:	4603      	mov	r3, r0
 800163e:	4930      	ldr	r1, [pc, #192]	@ (8001700 <main+0x2a8>)
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fb65 	bl	8000d10 <__aeabi_fdiv>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	4b2c      	ldr	r3, [pc, #176]	@ (80016fc <main+0x2a4>)
 800164c:	611a      	str	r2, [r3, #16]
			ADCvalue.V5amp = ADCvalue.Vamp
 800164e:	4b2b      	ldr	r3, [pc, #172]	@ (80016fc <main+0x2a4>)
 8001650:	691b      	ldr	r3, [r3, #16]
					* ((10000.0 + 20000.0) / 20000.0);
 8001652:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff faa6 	bl	8000ba8 <__aeabi_fmul>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
			ADCvalue.V5amp = ADCvalue.Vamp
 8001660:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <main+0x2a4>)
 8001662:	60da      	str	r2, [r3, #12]
			ADCvalue.amp = (ADCvalue.V5amp - 2.5) / V_A;
 8001664:	4b25      	ldr	r3, [pc, #148]	@ (80016fc <main+0x2a4>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe fed5 	bl	8000418 <__aeabi_f2d>
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <main+0x2b8>)
 8001674:	f7fe fd70 	bl	8000158 <__aeabi_dsub>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	a30b      	add	r3, pc, #44	@ (adr r3, 80016b0 <main+0x258>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7ff f849 	bl	800071c <__aeabi_ddiv>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff f92b 	bl	80008ec <__aeabi_d2f>
 8001696:	4603      	mov	r3, r0
 8001698:	4a18      	ldr	r2, [pc, #96]	@ (80016fc <main+0x2a4>)
 800169a:	6153      	str	r3, [r2, #20]
  while (1){
 800169c:	e746      	b.n	800152c <main+0xd4>
 800169e:	bf00      	nop
 80016a0:	0ccc0000 	.word	0x0ccc0000
 80016a4:	40b33200 	.word	0x40b33200
 80016a8:	40000000 	.word	0x40000000
 80016ac:	40113333 	.word	0x40113333
 80016b0:	40000000 	.word	0x40000000
 80016b4:	3fb0e560 	.word	0x3fb0e560
 80016b8:	40010c00 	.word	0x40010c00
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000170 	.word	0x20000170
 80016c4:	20000004 	.word	0x20000004
 80016c8:	20000008 	.word	0x20000008
 80016cc:	200001b8 	.word	0x200001b8
 80016d0:	20000248 	.word	0x20000248
 80016d4:	200000fc 	.word	0x200000fc
 80016d8:	200000d4 	.word	0x200000d4
 80016dc:	2000009c 	.word	0x2000009c
 80016e0:	2000035c 	.word	0x2000035c
 80016e4:	20000200 	.word	0x20000200
 80016e8:	2000004d 	.word	0x2000004d
 80016ec:	20000080 	.word	0x20000080
 80016f0:	20000084 	.word	0x20000084
 80016f4:	200000a4 	.word	0x200000a4
 80016f8:	2000007c 	.word	0x2000007c
 80016fc:	200000bc 	.word	0x200000bc
 8001700:	457ff000 	.word	0x457ff000
 8001704:	3fb70a3d 	.word	0x3fb70a3d
 8001708:	408f4000 	.word	0x408f4000
 800170c:	40390000 	.word	0x40390000
 8001710:	40040000 	.word	0x40040000

08001714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b094      	sub	sp, #80	@ 0x50
 8001718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800171e:	2228      	movs	r2, #40	@ 0x28
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f005 fb6c 	bl	8006e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001744:	2301      	movs	r3, #1
 8001746:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001748:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800174c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001752:	2301      	movs	r3, #1
 8001754:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001756:	2302      	movs	r3, #2
 8001758:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800175e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001760:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001764:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001766:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fbee 	bl	8003f4c <HAL_RCC_OscConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001776:	f000 fe6d 	bl	8002454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	230f      	movs	r3, #15
 800177c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177e:	2302      	movs	r3, #2
 8001780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001786:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800178a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2102      	movs	r1, #2
 8001796:	4618      	mov	r0, r3
 8001798:	f002 fe5a 	bl	8004450 <HAL_RCC_ClockConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80017a2:	f000 fe57 	bl	8002454 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017a6:	2302      	movs	r3, #2
 80017a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80017aa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80017ae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 ffda 	bl	800476c <HAL_RCCEx_PeriphCLKConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017be:	f000 fe49 	bl	8002454 <Error_Handler>
  }
}
 80017c2:	bf00      	nop
 80017c4:	3750      	adds	r7, #80	@ 0x50
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017dc:	4b27      	ldr	r3, [pc, #156]	@ (800187c <MX_ADC1_Init+0xb0>)
 80017de:	4a28      	ldr	r2, [pc, #160]	@ (8001880 <MX_ADC1_Init+0xb4>)
 80017e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017e2:	4b26      	ldr	r3, [pc, #152]	@ (800187c <MX_ADC1_Init+0xb0>)
 80017e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017ea:	4b24      	ldr	r3, [pc, #144]	@ (800187c <MX_ADC1_Init+0xb0>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017f0:	4b22      	ldr	r3, [pc, #136]	@ (800187c <MX_ADC1_Init+0xb0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f6:	4b21      	ldr	r3, [pc, #132]	@ (800187c <MX_ADC1_Init+0xb0>)
 80017f8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80017fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017fe:	4b1f      	ldr	r3, [pc, #124]	@ (800187c <MX_ADC1_Init+0xb0>)
 8001800:	2200      	movs	r2, #0
 8001802:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001804:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <MX_ADC1_Init+0xb0>)
 8001806:	2203      	movs	r2, #3
 8001808:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800180a:	481c      	ldr	r0, [pc, #112]	@ (800187c <MX_ADC1_Init+0xb0>)
 800180c:	f001 f9d8 	bl	8002bc0 <HAL_ADC_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001816:	f000 fe1d 	bl	8002454 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800181a:	2311      	movs	r3, #17
 800181c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800181e:	2301      	movs	r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001822:	2307      	movs	r3, #7
 8001824:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	4619      	mov	r1, r3
 800182a:	4814      	ldr	r0, [pc, #80]	@ (800187c <MX_ADC1_Init+0xb0>)
 800182c:	f001 fb9a 	bl	8002f64 <HAL_ADC_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001836:	f000 fe0d 	bl	8002454 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800183a:	2310      	movs	r3, #16
 800183c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800183e:	2302      	movs	r3, #2
 8001840:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	4619      	mov	r1, r3
 8001846:	480d      	ldr	r0, [pc, #52]	@ (800187c <MX_ADC1_Init+0xb0>)
 8001848:	f001 fb8c 	bl	8002f64 <HAL_ADC_ConfigChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001852:	f000 fdff 	bl	8002454 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001856:	2302      	movs	r3, #2
 8001858:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800185a:	2303      	movs	r3, #3
 800185c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	4619      	mov	r1, r3
 8001862:	4806      	ldr	r0, [pc, #24]	@ (800187c <MX_ADC1_Init+0xb0>)
 8001864:	f001 fb7e 	bl	8002f64 <HAL_ADC_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800186e:	f000 fdf1 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200000fc 	.word	0x200000fc
 8001880:	40012400 	.word	0x40012400

08001884 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b096      	sub	sp, #88	@ 0x58
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	615a      	str	r2, [r3, #20]
 80018b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2220      	movs	r2, #32
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f005 fa9f 	bl	8006e00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018c2:	4b44      	ldr	r3, [pc, #272]	@ (80019d4 <MX_TIM1_Init+0x150>)
 80018c4:	4a44      	ldr	r2, [pc, #272]	@ (80019d8 <MX_TIM1_Init+0x154>)
 80018c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018c8:	4b42      	ldr	r3, [pc, #264]	@ (80019d4 <MX_TIM1_Init+0x150>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ce:	4b41      	ldr	r3, [pc, #260]	@ (80019d4 <MX_TIM1_Init+0x150>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80018d4:	4b3f      	ldr	r3, [pc, #252]	@ (80019d4 <MX_TIM1_Init+0x150>)
 80018d6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80018da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018dc:	4b3d      	ldr	r3, [pc, #244]	@ (80019d4 <MX_TIM1_Init+0x150>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018e2:	4b3c      	ldr	r3, [pc, #240]	@ (80019d4 <MX_TIM1_Init+0x150>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e8:	4b3a      	ldr	r3, [pc, #232]	@ (80019d4 <MX_TIM1_Init+0x150>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018ee:	4839      	ldr	r0, [pc, #228]	@ (80019d4 <MX_TIM1_Init+0x150>)
 80018f0:	f003 f8a8 	bl	8004a44 <HAL_TIM_Base_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80018fa:	f000 fdab 	bl	8002454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001902:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001904:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001908:	4619      	mov	r1, r3
 800190a:	4832      	ldr	r0, [pc, #200]	@ (80019d4 <MX_TIM1_Init+0x150>)
 800190c:	f003 fe30 	bl	8005570 <HAL_TIM_ConfigClockSource>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001916:	f000 fd9d 	bl	8002454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800191a:	482e      	ldr	r0, [pc, #184]	@ (80019d4 <MX_TIM1_Init+0x150>)
 800191c:	f003 f934 	bl	8004b88 <HAL_TIM_PWM_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001926:	f000 fd95 	bl	8002454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001932:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001936:	4619      	mov	r1, r3
 8001938:	4826      	ldr	r0, [pc, #152]	@ (80019d4 <MX_TIM1_Init+0x150>)
 800193a:	f004 fa8b 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001944:	f000 fd86 	bl	8002454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001948:	2360      	movs	r3, #96	@ 0x60
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001954:	2300      	movs	r3, #0
 8001956:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001964:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001968:	2200      	movs	r2, #0
 800196a:	4619      	mov	r1, r3
 800196c:	4819      	ldr	r0, [pc, #100]	@ (80019d4 <MX_TIM1_Init+0x150>)
 800196e:	f003 fd3d 	bl	80053ec <HAL_TIM_PWM_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001978:	f000 fd6c 	bl	8002454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800197c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001980:	2208      	movs	r2, #8
 8001982:	4619      	mov	r1, r3
 8001984:	4813      	ldr	r0, [pc, #76]	@ (80019d4 <MX_TIM1_Init+0x150>)
 8001986:	f003 fd31 	bl	80053ec <HAL_TIM_PWM_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001990:	f000 fd60 	bl	8002454 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	4619      	mov	r1, r3
 80019b6:	4807      	ldr	r0, [pc, #28]	@ (80019d4 <MX_TIM1_Init+0x150>)
 80019b8:	f004 faaa 	bl	8005f10 <HAL_TIMEx_ConfigBreakDeadTime>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80019c2:	f000 fd47 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019c6:	4803      	ldr	r0, [pc, #12]	@ (80019d4 <MX_TIM1_Init+0x150>)
 80019c8:	f000 fef8 	bl	80027bc <HAL_TIM_MspPostInit>

}
 80019cc:	bf00      	nop
 80019ce:	3758      	adds	r7, #88	@ 0x58
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000170 	.word	0x20000170
 80019d8:	40012c00 	.word	0x40012c00

080019dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08e      	sub	sp, #56	@ 0x38
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f0:	f107 0320 	add.w	r3, r7, #32
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
 8001a08:	615a      	str	r2, [r3, #20]
 8001a0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac4 <MX_TIM2_Init+0xe8>)
 8001a0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001a14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac4 <MX_TIM2_Init+0xe8>)
 8001a16:	2247      	movs	r2, #71	@ 0x47
 8001a18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <MX_TIM2_Init+0xe8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001a20:	4b28      	ldr	r3, [pc, #160]	@ (8001ac4 <MX_TIM2_Init+0xe8>)
 8001a22:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001a26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a28:	4b26      	ldr	r3, [pc, #152]	@ (8001ac4 <MX_TIM2_Init+0xe8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <MX_TIM2_Init+0xe8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a34:	4823      	ldr	r0, [pc, #140]	@ (8001ac4 <MX_TIM2_Init+0xe8>)
 8001a36:	f003 f805 	bl	8004a44 <HAL_TIM_Base_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a40:	f000 fd08 	bl	8002454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a4e:	4619      	mov	r1, r3
 8001a50:	481c      	ldr	r0, [pc, #112]	@ (8001ac4 <MX_TIM2_Init+0xe8>)
 8001a52:	f003 fd8d 	bl	8005570 <HAL_TIM_ConfigClockSource>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a5c:	f000 fcfa 	bl	8002454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a60:	4818      	ldr	r0, [pc, #96]	@ (8001ac4 <MX_TIM2_Init+0xe8>)
 8001a62:	f003 f891 	bl	8004b88 <HAL_TIM_PWM_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a6c:	f000 fcf2 	bl	8002454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a78:	f107 0320 	add.w	r3, r7, #32
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4811      	ldr	r0, [pc, #68]	@ (8001ac4 <MX_TIM2_Init+0xe8>)
 8001a80:	f004 f9e8 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a8a:	f000 fce3 	bl	8002454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a8e:	2360      	movs	r3, #96	@ 0x60
 8001a90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4807      	ldr	r0, [pc, #28]	@ (8001ac4 <MX_TIM2_Init+0xe8>)
 8001aa6:	f003 fca1 	bl	80053ec <HAL_TIM_PWM_ConfigChannel>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001ab0:	f000 fcd0 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ab4:	4803      	ldr	r0, [pc, #12]	@ (8001ac4 <MX_TIM2_Init+0xe8>)
 8001ab6:	f000 fe81 	bl	80027bc <HAL_TIM_MspPostInit>

}
 8001aba:	bf00      	nop
 8001abc:	3738      	adds	r7, #56	@ 0x38
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200001b8 	.word	0x200001b8

08001ac8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	@ 0x30
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	2224      	movs	r2, #36	@ 0x24
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f005 f992 	bl	8006e00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ae4:	4b20      	ldr	r3, [pc, #128]	@ (8001b68 <MX_TIM3_Init+0xa0>)
 8001ae6:	4a21      	ldr	r2, [pc, #132]	@ (8001b6c <MX_TIM3_Init+0xa4>)
 8001ae8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001aea:	4b1f      	ldr	r3, [pc, #124]	@ (8001b68 <MX_TIM3_Init+0xa0>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <MX_TIM3_Init+0xa0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001af6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b68 <MX_TIM3_Init+0xa0>)
 8001af8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001afc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b68 <MX_TIM3_Init+0xa0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b04:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <MX_TIM3_Init+0xa0>)
 8001b06:	2280      	movs	r2, #128	@ 0x80
 8001b08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b12:	2301      	movs	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b22:	2301      	movs	r3, #1
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	4619      	mov	r1, r3
 8001b34:	480c      	ldr	r0, [pc, #48]	@ (8001b68 <MX_TIM3_Init+0xa0>)
 8001b36:	f003 fa21 	bl	8004f7c <HAL_TIM_Encoder_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b40:	f000 fc88 	bl	8002454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	@ (8001b68 <MX_TIM3_Init+0xa0>)
 8001b52:	f004 f97f 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b5c:	f000 fc7a 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	3730      	adds	r7, #48	@ 0x30
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000200 	.word	0x20000200
 8001b6c:	40000400 	.word	0x40000400

08001b70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b84:	463b      	mov	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001c08 <MX_TIM4_Init+0x98>)
 8001b90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001b92:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001b94:	2247      	movs	r2, #71	@ 0x47
 8001b96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001ba0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ba4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bac:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bb2:	4814      	ldr	r0, [pc, #80]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001bb4:	f002 ff46 	bl	8004a44 <HAL_TIM_Base_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001bbe:	f000 fc49 	bl	8002454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bc8:	f107 0308 	add.w	r3, r7, #8
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001bd0:	f003 fcce 	bl	8005570 <HAL_TIM_ConfigClockSource>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001bda:	f000 fc3b 	bl	8002454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001be6:	463b      	mov	r3, r7
 8001be8:	4619      	mov	r1, r3
 8001bea:	4806      	ldr	r0, [pc, #24]	@ (8001c04 <MX_TIM4_Init+0x94>)
 8001bec:	f004 f932 	bl	8005e54 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001bf6:	f000 fc2d 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000248 	.word	0x20000248
 8001c08:	40000800 	.word	0x40000800

08001c0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <MX_USART1_UART_Init+0x50>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c44:	f004 f9c7 	bl	8005fd6 <HAL_UART_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c4e:	f000 fc01 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	2000035c 	.word	0x2000035c
 8001c5c:	40013800 	.word	0x40013800

08001c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c66:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd8 <MX_DMA_Init+0x78>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd8 <MX_DMA_Init+0x78>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6153      	str	r3, [r2, #20]
 8001c72:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <MX_DMA_Init+0x78>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	200b      	movs	r0, #11
 8001c84:	f001 fced 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c88:	200b      	movs	r0, #11
 8001c8a:	f001 fd06 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	200c      	movs	r0, #12
 8001c94:	f001 fce5 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c98:	200c      	movs	r0, #12
 8001c9a:	f001 fcfe 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	200f      	movs	r0, #15
 8001ca4:	f001 fcdd 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001ca8:	200f      	movs	r0, #15
 8001caa:	f001 fcf6 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2010      	movs	r0, #16
 8001cb4:	f001 fcd5 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001cb8:	2010      	movs	r0, #16
 8001cba:	f001 fcee 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2011      	movs	r0, #17
 8001cc4:	f001 fccd 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001cc8:	2011      	movs	r0, #17
 8001cca:	f001 fce6 	bl	800369a <HAL_NVIC_EnableIRQ>

}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000

08001cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce2:	f107 0310 	add.w	r3, r7, #16
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8001da0 <MX_GPIO_Init+0xc4>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8001da0 <MX_GPIO_Init+0xc4>)
 8001cf6:	f043 0320 	orr.w	r3, r3, #32
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b28      	ldr	r3, [pc, #160]	@ (8001da0 <MX_GPIO_Init+0xc4>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0320 	and.w	r3, r3, #32
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d08:	4b25      	ldr	r3, [pc, #148]	@ (8001da0 <MX_GPIO_Init+0xc4>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a24      	ldr	r2, [pc, #144]	@ (8001da0 <MX_GPIO_Init+0xc4>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b22      	ldr	r3, [pc, #136]	@ (8001da0 <MX_GPIO_Init+0xc4>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d20:	4b1f      	ldr	r3, [pc, #124]	@ (8001da0 <MX_GPIO_Init+0xc4>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a1e      	ldr	r2, [pc, #120]	@ (8001da0 <MX_GPIO_Init+0xc4>)
 8001d26:	f043 0308 	orr.w	r3, r3, #8
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001da0 <MX_GPIO_Init+0xc4>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, enRED_Pin|enBLACK_Pin|ledA_Pin|ledB_Pin
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f249 0138 	movw	r1, #36920	@ 0x9038
 8001d3e:	4819      	ldr	r0, [pc, #100]	@ (8001da4 <MX_GPIO_Init+0xc8>)
 8001d40:	f002 f8ec 	bl	8003f1c <HAL_GPIO_WritePin>
                          |ledC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ADXL_SCL_Pin ADXL_SDA_Pin */
  GPIO_InitStruct.Pin = ADXL_SCL_Pin|ADXL_SDA_Pin;
 8001d44:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4a:	2312      	movs	r3, #18
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	4619      	mov	r1, r3
 8001d58:	4812      	ldr	r0, [pc, #72]	@ (8001da4 <MX_GPIO_Init+0xc8>)
 8001d5a:	f001 ff5b 	bl	8003c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : enRED_Pin enBLACK_Pin */
  GPIO_InitStruct.Pin = enRED_Pin|enBLACK_Pin;
 8001d5e:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4619      	mov	r1, r3
 8001d76:	480b      	ldr	r0, [pc, #44]	@ (8001da4 <MX_GPIO_Init+0xc8>)
 8001d78:	f001 ff4c 	bl	8003c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ledA_Pin ledB_Pin ledC_Pin */
  GPIO_InitStruct.Pin = ledA_Pin|ledB_Pin|ledC_Pin;
 8001d7c:	2338      	movs	r3, #56	@ 0x38
 8001d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d80:	2301      	movs	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 0310 	add.w	r3, r7, #16
 8001d90:	4619      	mov	r1, r3
 8001d92:	4804      	ldr	r0, [pc, #16]	@ (8001da4 <MX_GPIO_Init+0xc8>)
 8001d94:	f001 ff3e 	bl	8003c14 <HAL_GPIO_Init>

}
 8001d98:	bf00      	nop
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010c00 	.word	0x40010c00

08001da8 <moveDataToStructPID>:

/* USER CODE BEGIN 4 */
void moveDataToStructPID(uint8_t *rx_buff_LoRa, sendPID_t *send_data) {
 8001da8:	b490      	push	{r4, r7}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
	send_data->index = rx_buff_LoRa[0];
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	701a      	strb	r2, [r3, #0]
	send_data->identifier = rx_buff_LoRa[1];
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	785a      	ldrb	r2, [r3, #1]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	705a      	strb	r2, [r3, #1]

	send_data->_stearing = ((uint16_t) (rx_buff_LoRa[3] & 0xF) << 8)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3303      	adds	r3, #3
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001dd0:	b21a      	sxth	r2, r3
			| rx_buff_LoRa[2];
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b21b      	sxth	r3, r3
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de2:	b29a      	uxth	r2, r3
	send_data->_stearing = ((uint16_t) (rx_buff_LoRa[3] & 0xF) << 8)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2d1      	uxtb	r1, r2
 8001de8:	2000      	movs	r0, #0
 8001dea:	4301      	orrs	r1, r0
 8001dec:	7099      	strb	r1, [r3, #2]
 8001dee:	0a12      	lsrs	r2, r2, #8
 8001df0:	b292      	uxth	r2, r2
 8001df2:	f002 020f 	and.w	r2, r2, #15
 8001df6:	f002 000f 	and.w	r0, r2, #15
 8001dfa:	78da      	ldrb	r2, [r3, #3]
 8001dfc:	f022 020f 	bic.w	r2, r2, #15
 8001e00:	4611      	mov	r1, r2
 8001e02:	4602      	mov	r2, r0
 8001e04:	430a      	orrs	r2, r1
 8001e06:	70da      	strb	r2, [r3, #3]
	send_data->_setPoint = ((uint16_t) rx_buff_LoRa[4] << 4)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	011b      	lsls	r3, r3, #4
			| (rx_buff_LoRa[3] >> 4);
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3303      	adds	r3, #3
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e26:	b29a      	uxth	r2, r3
	send_data->_setPoint = ((uint16_t) rx_buff_LoRa[4] << 4)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f002 010f 	and.w	r1, r2, #15
 8001e2e:	010c      	lsls	r4, r1, #4
 8001e30:	78d9      	ldrb	r1, [r3, #3]
 8001e32:	f001 010f 	and.w	r1, r1, #15
 8001e36:	4608      	mov	r0, r1
 8001e38:	4621      	mov	r1, r4
 8001e3a:	4301      	orrs	r1, r0
 8001e3c:	70d9      	strb	r1, [r3, #3]
 8001e3e:	0912      	lsrs	r2, r2, #4
 8001e40:	b292      	uxth	r2, r2
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	2100      	movs	r1, #0
 8001e46:	430a      	orrs	r2, r1
 8001e48:	711a      	strb	r2, [r3, #4]
	send_data->_propotional = ((uint16_t) (rx_buff_LoRa[6] & 0xF) << 8)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3306      	adds	r3, #6
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001e58:	b21a      	sxth	r2, r3
			| rx_buff_LoRa[5];
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3305      	adds	r3, #5
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	4313      	orrs	r3, r2
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6a:	b29a      	uxth	r2, r3
	send_data->_propotional = ((uint16_t) (rx_buff_LoRa[6] & 0xF) << 8)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	b2d1      	uxtb	r1, r2
 8001e70:	2000      	movs	r0, #0
 8001e72:	4301      	orrs	r1, r0
 8001e74:	7159      	strb	r1, [r3, #5]
 8001e76:	0a12      	lsrs	r2, r2, #8
 8001e78:	b292      	uxth	r2, r2
 8001e7a:	f002 020f 	and.w	r2, r2, #15
 8001e7e:	f002 000f 	and.w	r0, r2, #15
 8001e82:	799a      	ldrb	r2, [r3, #6]
 8001e84:	f022 020f 	bic.w	r2, r2, #15
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	719a      	strb	r2, [r3, #6]
	send_data->_integral = ((uint16_t) rx_buff_LoRa[7] << 4)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3307      	adds	r3, #7
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	011b      	lsls	r3, r3, #4
			| (rx_buff_LoRa[6] >> 4);
 8001e98:	b21a      	sxth	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3306      	adds	r3, #6
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eae:	b29a      	uxth	r2, r3
	send_data->_integral = ((uint16_t) rx_buff_LoRa[7] << 4)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f002 010f 	and.w	r1, r2, #15
 8001eb6:	010c      	lsls	r4, r1, #4
 8001eb8:	7999      	ldrb	r1, [r3, #6]
 8001eba:	f001 010f 	and.w	r1, r1, #15
 8001ebe:	4608      	mov	r0, r1
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	4301      	orrs	r1, r0
 8001ec4:	7199      	strb	r1, [r3, #6]
 8001ec6:	0912      	lsrs	r2, r2, #4
 8001ec8:	b292      	uxth	r2, r2
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	2100      	movs	r1, #0
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	71da      	strb	r2, [r3, #7]
	send_data->_derivative = ((uint16_t) (rx_buff_LoRa[9] & 0xF) << 8)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3309      	adds	r3, #9
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	b21b      	sxth	r3, r3
 8001edc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001ee0:	b21a      	sxth	r2, r3
			| rx_buff_LoRa[8];
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3308      	adds	r3, #8
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	b21b      	sxth	r3, r3
 8001eea:	4313      	orrs	r3, r2
 8001eec:	b21b      	sxth	r3, r3
 8001eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef2:	b29a      	uxth	r2, r3
	send_data->_derivative = ((uint16_t) (rx_buff_LoRa[9] & 0xF) << 8)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2d1      	uxtb	r1, r2
 8001ef8:	2000      	movs	r0, #0
 8001efa:	4301      	orrs	r1, r0
 8001efc:	7219      	strb	r1, [r3, #8]
 8001efe:	0a12      	lsrs	r2, r2, #8
 8001f00:	b292      	uxth	r2, r2
 8001f02:	f002 020f 	and.w	r2, r2, #15
 8001f06:	f002 000f 	and.w	r0, r2, #15
 8001f0a:	7a5a      	ldrb	r2, [r3, #9]
 8001f0c:	f022 020f 	bic.w	r2, r2, #15
 8001f10:	4611      	mov	r1, r2
 8001f12:	4602      	mov	r2, r0
 8001f14:	430a      	orrs	r2, r1
 8001f16:	725a      	strb	r2, [r3, #9]
	send_data->checkSum = ((uint16_t) rx_buff_LoRa[10] << 4)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	330a      	adds	r3, #10
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	011b      	lsls	r3, r3, #4
			| (rx_buff_LoRa[9] >> 4);
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3309      	adds	r3, #9
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f36:	b29a      	uxth	r2, r3
	send_data->checkSum = ((uint16_t) rx_buff_LoRa[10] << 4)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f002 010f 	and.w	r1, r2, #15
 8001f3e:	010c      	lsls	r4, r1, #4
 8001f40:	7a59      	ldrb	r1, [r3, #9]
 8001f42:	f001 010f 	and.w	r1, r1, #15
 8001f46:	4608      	mov	r0, r1
 8001f48:	4621      	mov	r1, r4
 8001f4a:	4301      	orrs	r1, r0
 8001f4c:	7259      	strb	r1, [r3, #9]
 8001f4e:	0912      	lsrs	r2, r2, #4
 8001f50:	b292      	uxth	r2, r2
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	2100      	movs	r1, #0
 8001f56:	430a      	orrs	r2, r1
 8001f58:	729a      	strb	r2, [r3, #10]
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc90      	pop	{r4, r7}
 8001f62:	4770      	bx	lr

08001f64 <moveDataToStructControl>:

void moveDataToStructControl(uint8_t *rx_buff_LoRa, sendControl_t *send_data) {
 8001f64:	b490      	push	{r4, r7}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
	send_data->index = rx_buff_LoRa[0];
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	781a      	ldrb	r2, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	701a      	strb	r2, [r3, #0]
	send_data->indetifier = rx_buff_LoRa[1];
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	785a      	ldrb	r2, [r3, #1]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	705a      	strb	r2, [r3, #1]

	send_data->_stearing = ((uint16_t) (rx_buff_LoRa[3] & 0xF) << 8)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3303      	adds	r3, #3
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001f8c:	b21a      	sxth	r2, r3
			| rx_buff_LoRa[2];
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3302      	adds	r3, #2
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	4313      	orrs	r3, r2
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9e:	b29a      	uxth	r2, r3
	send_data->_stearing = ((uint16_t) (rx_buff_LoRa[3] & 0xF) << 8)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2d1      	uxtb	r1, r2
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	4301      	orrs	r1, r0
 8001fa8:	7099      	strb	r1, [r3, #2]
 8001faa:	0a12      	lsrs	r2, r2, #8
 8001fac:	b292      	uxth	r2, r2
 8001fae:	f002 020f 	and.w	r2, r2, #15
 8001fb2:	f002 000f 	and.w	r0, r2, #15
 8001fb6:	78da      	ldrb	r2, [r3, #3]
 8001fb8:	f022 020f 	bic.w	r2, r2, #15
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	70da      	strb	r2, [r3, #3]
	send_data->_setPoint = ((uint16_t) rx_buff_LoRa[4] << 4)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	011b      	lsls	r3, r3, #4
			| (rx_buff_LoRa[3] >> 4);
 8001fcc:	b21a      	sxth	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3303      	adds	r3, #3
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe2:	b29a      	uxth	r2, r3
	send_data->_setPoint = ((uint16_t) rx_buff_LoRa[4] << 4)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f002 010f 	and.w	r1, r2, #15
 8001fea:	010c      	lsls	r4, r1, #4
 8001fec:	78d9      	ldrb	r1, [r3, #3]
 8001fee:	f001 010f 	and.w	r1, r1, #15
 8001ff2:	4608      	mov	r0, r1
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	4301      	orrs	r1, r0
 8001ff8:	70d9      	strb	r1, [r3, #3]
 8001ffa:	0912      	lsrs	r2, r2, #4
 8001ffc:	b292      	uxth	r2, r2
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	2100      	movs	r1, #0
 8002002:	430a      	orrs	r2, r1
 8002004:	711a      	strb	r2, [r3, #4]
	send_data->dummy = ((uint16_t) rx_buff_LoRa[5] & 0xF);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3305      	adds	r3, #5
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	b2d9      	uxtb	r1, r3
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	7953      	ldrb	r3, [r2, #5]
 8002016:	f361 0303 	bfi	r3, r1, #0, #4
 800201a:	7153      	strb	r3, [r2, #5]
	send_data->checkSum = ((uint16_t) rx_buff_LoRa[6] << 4)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3306      	adds	r3, #6
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	011b      	lsls	r3, r3, #4
			| (rx_buff_LoRa[5] >> 4);
 8002024:	b21a      	sxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3305      	adds	r3, #5
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	b2db      	uxtb	r3, r3
 8002030:	b21b      	sxth	r3, r3
 8002032:	4313      	orrs	r3, r2
 8002034:	b21b      	sxth	r3, r3
 8002036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203a:	b29a      	uxth	r2, r3
	send_data->checkSum = ((uint16_t) rx_buff_LoRa[6] << 4)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f002 010f 	and.w	r1, r2, #15
 8002042:	010c      	lsls	r4, r1, #4
 8002044:	7959      	ldrb	r1, [r3, #5]
 8002046:	f001 010f 	and.w	r1, r1, #15
 800204a:	4608      	mov	r0, r1
 800204c:	4621      	mov	r1, r4
 800204e:	4301      	orrs	r1, r0
 8002050:	7159      	strb	r1, [r3, #5]
 8002052:	0912      	lsrs	r2, r2, #4
 8002054:	b292      	uxth	r2, r2
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	2100      	movs	r1, #0
 800205a:	430a      	orrs	r2, r1
 800205c:	719a      	strb	r2, [r3, #6]
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bc90      	pop	{r4, r7}
 8002066:	4770      	bx	lr

08002068 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af02      	add	r7, sp, #8
 800206e:	6078      	str	r0, [r7, #4]
//	HAL_UART_Receive_DMA(&huart1, rx_buff_IMU, 11); //You need to toggle a breakpoint on this line!
	if (huart == &huart1) {
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a84      	ldr	r2, [pc, #528]	@ (8002284 <HAL_UART_RxCpltCallback+0x21c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	f040 81cf 	bne.w	8002418 <HAL_UART_RxCpltCallback+0x3b0>
		uint32_t currTime = HAL_GetTick();
 800207a:	f000 fd73 	bl	8002b64 <HAL_GetTick>
 800207e:	60b8      	str	r0, [r7, #8]
//				else
//					clrIO(ledA_GPIO_Port, ledA_Pin);
//			}
//		}

		for (int i = 0; i < 6; ++i) {
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e1c4      	b.n	8002410 <HAL_UART_RxCpltCallback+0x3a8>
			switch (captureMode) {
 8002086:	4b80      	ldr	r3, [pc, #512]	@ (8002288 <HAL_UART_RxCpltCallback+0x220>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b03      	cmp	r3, #3
 800208c:	f200 81bd 	bhi.w	800240a <HAL_UART_RxCpltCallback+0x3a2>
 8002090:	a201      	add	r2, pc, #4	@ (adr r2, 8002098 <HAL_UART_RxCpltCallback+0x30>)
 8002092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002096:	bf00      	nop
 8002098:	080020a9 	.word	0x080020a9
 800209c:	080020cf 	.word	0x080020cf
 80020a0:	08002127 	.word	0x08002127
 80020a4:	080022b9 	.word	0x080022b9
			case 0:
				if (rx_DMA_buff_LoRa[i] == signiture1) {
 80020a8:	4a78      	ldr	r2, [pc, #480]	@ (800228c <HAL_UART_RxCpltCallback+0x224>)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4413      	add	r3, r2
 80020ae:	781a      	ldrb	r2, [r3, #0]
 80020b0:	4b77      	ldr	r3, [pc, #476]	@ (8002290 <HAL_UART_RxCpltCallback+0x228>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	f040 81a3 	bne.w	8002400 <HAL_UART_RxCpltCallback+0x398>
					rx_buff_LoRa[0] = rx_DMA_buff_LoRa[i];
 80020ba:	4a74      	ldr	r2, [pc, #464]	@ (800228c <HAL_UART_RxCpltCallback+0x224>)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4413      	add	r3, r2
 80020c0:	781a      	ldrb	r2, [r3, #0]
 80020c2:	4b74      	ldr	r3, [pc, #464]	@ (8002294 <HAL_UART_RxCpltCallback+0x22c>)
 80020c4:	701a      	strb	r2, [r3, #0]
					captureMode = 1;
 80020c6:	4b70      	ldr	r3, [pc, #448]	@ (8002288 <HAL_UART_RxCpltCallback+0x220>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
				}
				break;
 80020cc:	e198      	b.n	8002400 <HAL_UART_RxCpltCallback+0x398>
			case 1:
				if (rx_DMA_buff_LoRa[i] == signiture2) {
 80020ce:	4a6f      	ldr	r2, [pc, #444]	@ (800228c <HAL_UART_RxCpltCallback+0x224>)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4413      	add	r3, r2
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	4b70      	ldr	r3, [pc, #448]	@ (8002298 <HAL_UART_RxCpltCallback+0x230>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d10c      	bne.n	80020f8 <HAL_UART_RxCpltCallback+0x90>
					rx_buff_LoRa[1] = rx_DMA_buff_LoRa[i];
 80020de:	4a6b      	ldr	r2, [pc, #428]	@ (800228c <HAL_UART_RxCpltCallback+0x224>)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	4b6b      	ldr	r3, [pc, #428]	@ (8002294 <HAL_UART_RxCpltCallback+0x22c>)
 80020e8:	705a      	strb	r2, [r3, #1]
					captureMode = 2;
 80020ea:	4b67      	ldr	r3, [pc, #412]	@ (8002288 <HAL_UART_RxCpltCallback+0x220>)
 80020ec:	2202      	movs	r2, #2
 80020ee:	701a      	strb	r2, [r3, #0]
					currIndex = 2;
 80020f0:	4b6a      	ldr	r3, [pc, #424]	@ (800229c <HAL_UART_RxCpltCallback+0x234>)
 80020f2:	2202      	movs	r2, #2
 80020f4:	701a      	strb	r2, [r3, #0]
					captureMode = 3;
					currIndex = 2;
				} else {
					captureMode = 1;
				}
				break;
 80020f6:	e188      	b.n	800240a <HAL_UART_RxCpltCallback+0x3a2>
				} else if (rx_DMA_buff_LoRa[i] == 0x36) {
 80020f8:	4a64      	ldr	r2, [pc, #400]	@ (800228c <HAL_UART_RxCpltCallback+0x224>)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b36      	cmp	r3, #54	@ 0x36
 8002102:	d10c      	bne.n	800211e <HAL_UART_RxCpltCallback+0xb6>
					rx_buff_LoRa[1] = rx_DMA_buff_LoRa[i];
 8002104:	4a61      	ldr	r2, [pc, #388]	@ (800228c <HAL_UART_RxCpltCallback+0x224>)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4413      	add	r3, r2
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	4b61      	ldr	r3, [pc, #388]	@ (8002294 <HAL_UART_RxCpltCallback+0x22c>)
 800210e:	705a      	strb	r2, [r3, #1]
					captureMode = 3;
 8002110:	4b5d      	ldr	r3, [pc, #372]	@ (8002288 <HAL_UART_RxCpltCallback+0x220>)
 8002112:	2203      	movs	r2, #3
 8002114:	701a      	strb	r2, [r3, #0]
					currIndex = 2;
 8002116:	4b61      	ldr	r3, [pc, #388]	@ (800229c <HAL_UART_RxCpltCallback+0x234>)
 8002118:	2202      	movs	r2, #2
 800211a:	701a      	strb	r2, [r3, #0]
				break;
 800211c:	e175      	b.n	800240a <HAL_UART_RxCpltCallback+0x3a2>
					captureMode = 1;
 800211e:	4b5a      	ldr	r3, [pc, #360]	@ (8002288 <HAL_UART_RxCpltCallback+0x220>)
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
				break;
 8002124:	e171      	b.n	800240a <HAL_UART_RxCpltCallback+0x3a2>
			case 2:
				rx_buff_LoRa[currIndex] = rx_DMA_buff_LoRa[i];
 8002126:	4b5d      	ldr	r3, [pc, #372]	@ (800229c <HAL_UART_RxCpltCallback+0x234>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	4619      	mov	r1, r3
 800212c:	4a57      	ldr	r2, [pc, #348]	@ (800228c <HAL_UART_RxCpltCallback+0x224>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	781a      	ldrb	r2, [r3, #0]
 8002134:	4b57      	ldr	r3, [pc, #348]	@ (8002294 <HAL_UART_RxCpltCallback+0x22c>)
 8002136:	545a      	strb	r2, [r3, r1]
				// update time saat sudah menerima data
				rxTime = currTime;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4a59      	ldr	r2, [pc, #356]	@ (80022a0 <HAL_UART_RxCpltCallback+0x238>)
 800213c:	6013      	str	r3, [r2, #0]
				currIndex++;
 800213e:	4b57      	ldr	r3, [pc, #348]	@ (800229c <HAL_UART_RxCpltCallback+0x234>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b55      	ldr	r3, [pc, #340]	@ (800229c <HAL_UART_RxCpltCallback+0x234>)
 8002148:	701a      	strb	r2, [r3, #0]

				if (currIndex > 10) {
 800214a:	4b54      	ldr	r3, [pc, #336]	@ (800229c <HAL_UART_RxCpltCallback+0x234>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b0a      	cmp	r3, #10
 8002150:	f240 8158 	bls.w	8002404 <HAL_UART_RxCpltCallback+0x39c>
					currIndex = 2;
 8002154:	4b51      	ldr	r3, [pc, #324]	@ (800229c <HAL_UART_RxCpltCallback+0x234>)
 8002156:	2202      	movs	r2, #2
 8002158:	701a      	strb	r2, [r3, #0]
					moveDataToStructPID(rx_buff_LoRa, &receivedDataPID);
 800215a:	4952      	ldr	r1, [pc, #328]	@ (80022a4 <HAL_UART_RxCpltCallback+0x23c>)
 800215c:	484d      	ldr	r0, [pc, #308]	@ (8002294 <HAL_UART_RxCpltCallback+0x22c>)
 800215e:	f7ff fe23 	bl	8001da8 <moveDataToStructPID>

					uint16_t checkSum = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	82fb      	strh	r3, [r7, #22]
					checkSum += receivedDataPID.index;
 8002166:	4b4f      	ldr	r3, [pc, #316]	@ (80022a4 <HAL_UART_RxCpltCallback+0x23c>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	8afb      	ldrh	r3, [r7, #22]
 800216e:	4413      	add	r3, r2
 8002170:	82fb      	strh	r3, [r7, #22]
					checkSum += receivedDataPID.identifier;
 8002172:	4b4c      	ldr	r3, [pc, #304]	@ (80022a4 <HAL_UART_RxCpltCallback+0x23c>)
 8002174:	785b      	ldrb	r3, [r3, #1]
 8002176:	461a      	mov	r2, r3
 8002178:	8afb      	ldrh	r3, [r7, #22]
 800217a:	4413      	add	r3, r2
 800217c:	82fb      	strh	r3, [r7, #22]
					checkSum += receivedDataPID._stearing;
 800217e:	4b49      	ldr	r3, [pc, #292]	@ (80022a4 <HAL_UART_RxCpltCallback+0x23c>)
 8002180:	885b      	ldrh	r3, [r3, #2]
 8002182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002186:	b29b      	uxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	8afb      	ldrh	r3, [r7, #22]
 800218c:	4413      	add	r3, r2
 800218e:	82fb      	strh	r3, [r7, #22]
					checkSum += receivedDataPID._setPoint;
 8002190:	4b44      	ldr	r3, [pc, #272]	@ (80022a4 <HAL_UART_RxCpltCallback+0x23c>)
 8002192:	78da      	ldrb	r2, [r3, #3]
 8002194:	0912      	lsrs	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	791b      	ldrb	r3, [r3, #4]
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	4313      	orrs	r3, r2
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	8afb      	ldrh	r3, [r7, #22]
 80021a4:	4413      	add	r3, r2
 80021a6:	82fb      	strh	r3, [r7, #22]
					checkSum += receivedDataPID._derivative;
 80021a8:	4b3e      	ldr	r3, [pc, #248]	@ (80022a4 <HAL_UART_RxCpltCallback+0x23c>)
 80021aa:	891b      	ldrh	r3, [r3, #8]
 80021ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	8afb      	ldrh	r3, [r7, #22]
 80021b6:	4413      	add	r3, r2
 80021b8:	82fb      	strh	r3, [r7, #22]
					checkSum += receivedDataPID._integral;
 80021ba:	4b3a      	ldr	r3, [pc, #232]	@ (80022a4 <HAL_UART_RxCpltCallback+0x23c>)
 80021bc:	88db      	ldrh	r3, [r3, #6]
 80021be:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	8afb      	ldrh	r3, [r7, #22]
 80021c8:	4413      	add	r3, r2
 80021ca:	82fb      	strh	r3, [r7, #22]
					checkSum += receivedDataPID._propotional;
 80021cc:	4b35      	ldr	r3, [pc, #212]	@ (80022a4 <HAL_UART_RxCpltCallback+0x23c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f3c3 230b 	ubfx	r3, r3, #8, #12
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	8afb      	ldrh	r3, [r7, #22]
 80021da:	4413      	add	r3, r2
 80021dc:	82fb      	strh	r3, [r7, #22]

					//				val_pwmSERVO = map(receivedDataPID._stearing, 50, 4045, leftPos, rightPos);

					checkSum &= 0xFFF;
 80021de:	8afb      	ldrh	r3, [r7, #22]
 80021e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e4:	82fb      	strh	r3, [r7, #22]
					if (receivedDataPID.checkSum == checkSum) {
 80021e6:	4b2f      	ldr	r3, [pc, #188]	@ (80022a4 <HAL_UART_RxCpltCallback+0x23c>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f3c3 330b 	ubfx	r3, r3, #12, #12
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	8afb      	ldrh	r3, [r7, #22]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d140      	bne.n	800227a <HAL_UART_RxCpltCallback+0x212>
						correctData++;
 80021f8:	4b2b      	ldr	r3, [pc, #172]	@ (80022a8 <HAL_UART_RxCpltCallback+0x240>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	4a2a      	ldr	r2, [pc, #168]	@ (80022a8 <HAL_UART_RxCpltCallback+0x240>)
 8002200:	6013      	str	r3, [r2, #0]

						PID.Kp = mapf((float)receivedDataPID._propotional, 0.0, 4095.0, 0.0, 2000.0);
 8002202:	4b28      	ldr	r3, [pc, #160]	@ (80022a4 <HAL_UART_RxCpltCallback+0x23c>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f3c3 230b 	ubfx	r3, r3, #8, #12
 800220a:	b29b      	uxth	r3, r3
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fc73 	bl	8000af8 <__aeabi_ui2f>
 8002212:	4b26      	ldr	r3, [pc, #152]	@ (80022ac <HAL_UART_RxCpltCallback+0x244>)
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	4a25      	ldr	r2, [pc, #148]	@ (80022b0 <HAL_UART_RxCpltCallback+0x248>)
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	f7fe fec9 	bl	8000fb6 <mapf>
 8002224:	4603      	mov	r3, r0
 8002226:	4a23      	ldr	r2, [pc, #140]	@ (80022b4 <HAL_UART_RxCpltCallback+0x24c>)
 8002228:	6053      	str	r3, [r2, #4]
						PID.Ki = mapf((float)receivedDataPID._integral, 0.0, 4095.0, 0.0, 2000.0);
 800222a:	4b1e      	ldr	r3, [pc, #120]	@ (80022a4 <HAL_UART_RxCpltCallback+0x23c>)
 800222c:	88db      	ldrh	r3, [r3, #6]
 800222e:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8002232:	b29b      	uxth	r3, r3
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe fc5f 	bl	8000af8 <__aeabi_ui2f>
 800223a:	4b1c      	ldr	r3, [pc, #112]	@ (80022ac <HAL_UART_RxCpltCallback+0x244>)
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	4a1b      	ldr	r2, [pc, #108]	@ (80022b0 <HAL_UART_RxCpltCallback+0x248>)
 8002244:	f04f 0100 	mov.w	r1, #0
 8002248:	f7fe feb5 	bl	8000fb6 <mapf>
 800224c:	4603      	mov	r3, r0
 800224e:	4a19      	ldr	r2, [pc, #100]	@ (80022b4 <HAL_UART_RxCpltCallback+0x24c>)
 8002250:	6093      	str	r3, [r2, #8]
						PID.Kd = mapf((float)receivedDataPID._derivative, 0.0, 4095.0, 0.0, 2000.0);
 8002252:	4b14      	ldr	r3, [pc, #80]	@ (80022a4 <HAL_UART_RxCpltCallback+0x23c>)
 8002254:	891b      	ldrh	r3, [r3, #8]
 8002256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225a:	b29b      	uxth	r3, r3
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe fc4b 	bl	8000af8 <__aeabi_ui2f>
 8002262:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <HAL_UART_RxCpltCallback+0x244>)
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	4a11      	ldr	r2, [pc, #68]	@ (80022b0 <HAL_UART_RxCpltCallback+0x248>)
 800226c:	f04f 0100 	mov.w	r1, #0
 8002270:	f7fe fea1 	bl	8000fb6 <mapf>
 8002274:	4603      	mov	r3, r0
 8002276:	4a0f      	ldr	r2, [pc, #60]	@ (80022b4 <HAL_UART_RxCpltCallback+0x24c>)
 8002278:	60d3      	str	r3, [r2, #12]
					}
					captureMode = 1;
 800227a:	4b03      	ldr	r3, [pc, #12]	@ (8002288 <HAL_UART_RxCpltCallback+0x220>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002280:	e0c0      	b.n	8002404 <HAL_UART_RxCpltCallback+0x39c>
 8002282:	bf00      	nop
 8002284:	2000035c 	.word	0x2000035c
 8002288:	20000088 	.word	0x20000088
 800228c:	2000009c 	.word	0x2000009c
 8002290:	2000004b 	.word	0x2000004b
 8002294:	20000090 	.word	0x20000090
 8002298:	2000004c 	.word	0x2000004c
 800229c:	200000a8 	.word	0x200000a8
 80022a0:	20000084 	.word	0x20000084
 80022a4:	20000038 	.word	0x20000038
 80022a8:	2000008c 	.word	0x2000008c
 80022ac:	44fa0000 	.word	0x44fa0000
 80022b0:	457ff000 	.word	0x457ff000
 80022b4:	2000000c 	.word	0x2000000c
			case 3:
				rx_buff_LoRa[currIndex] = rx_DMA_buff_LoRa[i];
 80022b8:	4b59      	ldr	r3, [pc, #356]	@ (8002420 <HAL_UART_RxCpltCallback+0x3b8>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	4a59      	ldr	r2, [pc, #356]	@ (8002424 <HAL_UART_RxCpltCallback+0x3bc>)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	781a      	ldrb	r2, [r3, #0]
 80022c6:	4b58      	ldr	r3, [pc, #352]	@ (8002428 <HAL_UART_RxCpltCallback+0x3c0>)
 80022c8:	545a      	strb	r2, [r3, r1]
				// update time saat sudah menerima data
				rxTime = currTime;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4a57      	ldr	r2, [pc, #348]	@ (800242c <HAL_UART_RxCpltCallback+0x3c4>)
 80022ce:	6013      	str	r3, [r2, #0]
				currIndex++;
 80022d0:	4b53      	ldr	r3, [pc, #332]	@ (8002420 <HAL_UART_RxCpltCallback+0x3b8>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	4b51      	ldr	r3, [pc, #324]	@ (8002420 <HAL_UART_RxCpltCallback+0x3b8>)
 80022da:	701a      	strb	r2, [r3, #0]

				if (currIndex > 6) {
 80022dc:	4b50      	ldr	r3, [pc, #320]	@ (8002420 <HAL_UART_RxCpltCallback+0x3b8>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b06      	cmp	r3, #6
 80022e2:	f240 8091 	bls.w	8002408 <HAL_UART_RxCpltCallback+0x3a0>
					currIndex = 2;
 80022e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002420 <HAL_UART_RxCpltCallback+0x3b8>)
 80022e8:	2202      	movs	r2, #2
 80022ea:	701a      	strb	r2, [r3, #0]
					moveDataToStructControl(rx_buff_LoRa, &receivedDataControl);
 80022ec:	4950      	ldr	r1, [pc, #320]	@ (8002430 <HAL_UART_RxCpltCallback+0x3c8>)
 80022ee:	484e      	ldr	r0, [pc, #312]	@ (8002428 <HAL_UART_RxCpltCallback+0x3c0>)
 80022f0:	f7ff fe38 	bl	8001f64 <moveDataToStructControl>

					uint16_t checkSum = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	81fb      	strh	r3, [r7, #14]
					checkSum += receivedDataControl.index;
 80022f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002430 <HAL_UART_RxCpltCallback+0x3c8>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	89fb      	ldrh	r3, [r7, #14]
 8002300:	4413      	add	r3, r2
 8002302:	81fb      	strh	r3, [r7, #14]
					checkSum += receivedDataControl.indetifier;
 8002304:	4b4a      	ldr	r3, [pc, #296]	@ (8002430 <HAL_UART_RxCpltCallback+0x3c8>)
 8002306:	785b      	ldrb	r3, [r3, #1]
 8002308:	461a      	mov	r2, r3
 800230a:	89fb      	ldrh	r3, [r7, #14]
 800230c:	4413      	add	r3, r2
 800230e:	81fb      	strh	r3, [r7, #14]
					checkSum += receivedDataControl._stearing;
 8002310:	4b47      	ldr	r3, [pc, #284]	@ (8002430 <HAL_UART_RxCpltCallback+0x3c8>)
 8002312:	885b      	ldrh	r3, [r3, #2]
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	b29b      	uxth	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	89fb      	ldrh	r3, [r7, #14]
 800231e:	4413      	add	r3, r2
 8002320:	81fb      	strh	r3, [r7, #14]
					checkSum += receivedDataControl._setPoint;
 8002322:	4b43      	ldr	r3, [pc, #268]	@ (8002430 <HAL_UART_RxCpltCallback+0x3c8>)
 8002324:	78da      	ldrb	r2, [r3, #3]
 8002326:	0912      	lsrs	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	791b      	ldrb	r3, [r3, #4]
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	4313      	orrs	r3, r2
 8002330:	b29b      	uxth	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	89fb      	ldrh	r3, [r7, #14]
 8002336:	4413      	add	r3, r2
 8002338:	81fb      	strh	r3, [r7, #14]
					checkSum += receivedDataControl.dummy;
 800233a:	4b3d      	ldr	r3, [pc, #244]	@ (8002430 <HAL_UART_RxCpltCallback+0x3c8>)
 800233c:	795b      	ldrb	r3, [r3, #5]
 800233e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	89fb      	ldrh	r3, [r7, #14]
 8002348:	4413      	add	r3, r2
 800234a:	81fb      	strh	r3, [r7, #14]

					checkSum &= 0xFFF;
 800234c:	89fb      	ldrh	r3, [r7, #14]
 800234e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002352:	81fb      	strh	r3, [r7, #14]
					if (receivedDataControl.checkSum == checkSum) {
 8002354:	4b36      	ldr	r3, [pc, #216]	@ (8002430 <HAL_UART_RxCpltCallback+0x3c8>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f3c3 330b 	ubfx	r3, r3, #12, #12
 800235c:	b29b      	uxth	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	89fb      	ldrh	r3, [r7, #14]
 8002362:	429a      	cmp	r2, r3
 8002364:	d148      	bne.n	80023f8 <HAL_UART_RxCpltCallback+0x390>
						correctData++;
 8002366:	4b33      	ldr	r3, [pc, #204]	@ (8002434 <HAL_UART_RxCpltCallback+0x3cc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3301      	adds	r3, #1
 800236c:	4a31      	ldr	r2, [pc, #196]	@ (8002434 <HAL_UART_RxCpltCallback+0x3cc>)
 800236e:	6013      	str	r3, [r2, #0]

						if (!readIO(ledA_GPIO_Port, ledA_Pin))
 8002370:	4b31      	ldr	r3, [pc, #196]	@ (8002438 <HAL_UART_RxCpltCallback+0x3d0>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d103      	bne.n	8002384 <HAL_UART_RxCpltCallback+0x31c>
							setIO(ledA_GPIO_Port, ledA_Pin);
 800237c:	4b2e      	ldr	r3, [pc, #184]	@ (8002438 <HAL_UART_RxCpltCallback+0x3d0>)
 800237e:	2208      	movs	r2, #8
 8002380:	611a      	str	r2, [r3, #16]
 8002382:	e002      	b.n	800238a <HAL_UART_RxCpltCallback+0x322>
						else
							clrIO(ledA_GPIO_Port, ledA_Pin);
 8002384:	4b2c      	ldr	r3, [pc, #176]	@ (8002438 <HAL_UART_RxCpltCallback+0x3d0>)
 8002386:	2208      	movs	r2, #8
 8002388:	615a      	str	r2, [r3, #20]

						val_pwmSERVO = map(receivedDataControl._stearing, 500,
 800238a:	4b29      	ldr	r3, [pc, #164]	@ (8002430 <HAL_UART_RxCpltCallback+0x3c8>)
 800238c:	885b      	ldrh	r3, [r3, #2]
 800238e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002392:	b29b      	uxth	r3, r3
 8002394:	4618      	mov	r0, r3
 8002396:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800239a:	f240 637c 	movw	r3, #1660	@ 0x67c
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	f640 620b 	movw	r2, #3595	@ 0xe0b
 80023a6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80023aa:	f7fe fde9 	bl	8000f80 <map>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b22      	ldr	r3, [pc, #136]	@ (800243c <HAL_UART_RxCpltCallback+0x3d4>)
 80023b4:	601a      	str	r2, [r3, #0]
								4095 - 500, leftPos, rightPos);
						PID.setPoint = mapf((float)receivedDataControl._setPoint, 0.0, 4095.0, 0.0, 4.0);
 80023b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002430 <HAL_UART_RxCpltCallback+0x3c8>)
 80023b8:	78da      	ldrb	r2, [r3, #3]
 80023ba:	0912      	lsrs	r2, r2, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	791b      	ldrb	r3, [r3, #4]
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	4313      	orrs	r3, r2
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe fb96 	bl	8000af8 <__aeabi_ui2f>
 80023cc:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002440 <HAL_UART_RxCpltCallback+0x3d8>)
 80023d8:	f04f 0100 	mov.w	r1, #0
 80023dc:	f7fe fdeb 	bl	8000fb6 <mapf>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4a18      	ldr	r2, [pc, #96]	@ (8002444 <HAL_UART_RxCpltCallback+0x3dc>)
 80023e4:	6013      	str	r3, [r2, #0]
//						if (receivedDataControl._setPoint == 0) {
//							clrIO(enBLACK_GPIO_Port, enBLACK_Pin);
//							clrIO(enRED_GPIO_Port, enRED_Pin);
//						}

						controlInterval = currTime - lastControlTime;
 80023e6:	4b18      	ldr	r3, [pc, #96]	@ (8002448 <HAL_UART_RxCpltCallback+0x3e0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	4a17      	ldr	r2, [pc, #92]	@ (800244c <HAL_UART_RxCpltCallback+0x3e4>)
 80023f0:	6013      	str	r3, [r2, #0]
						lastControlTime = currTime;
 80023f2:	4a15      	ldr	r2, [pc, #84]	@ (8002448 <HAL_UART_RxCpltCallback+0x3e0>)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	6013      	str	r3, [r2, #0]
					}
					captureMode = 1;
 80023f8:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <HAL_UART_RxCpltCallback+0x3e8>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
				}
				break;
 80023fe:	e003      	b.n	8002408 <HAL_UART_RxCpltCallback+0x3a0>
				break;
 8002400:	bf00      	nop
 8002402:	e002      	b.n	800240a <HAL_UART_RxCpltCallback+0x3a2>
				break;
 8002404:	bf00      	nop
 8002406:	e000      	b.n	800240a <HAL_UART_RxCpltCallback+0x3a2>
				break;
 8002408:	bf00      	nop
		for (int i = 0; i < 6; ++i) {
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	3301      	adds	r3, #1
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	2b05      	cmp	r3, #5
 8002414:	f77f ae37 	ble.w	8002086 <HAL_UART_RxCpltCallback+0x1e>
//				}
//			}
//		}
	}
//	HAL_UART_Receive_DMA(&huart1, rx_buff_IMU, 11); //You need to toggle a breakpoint on this line!
}
 8002418:	bf00      	nop
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	200000a8 	.word	0x200000a8
 8002424:	2000009c 	.word	0x2000009c
 8002428:	20000090 	.word	0x20000090
 800242c:	20000084 	.word	0x20000084
 8002430:	20000044 	.word	0x20000044
 8002434:	2000008c 	.word	0x2000008c
 8002438:	40010c00 	.word	0x40010c00
 800243c:	20000008 	.word	0x20000008
 8002440:	457ff000 	.word	0x457ff000
 8002444:	2000000c 	.word	0x2000000c
 8002448:	200000ac 	.word	0x200000ac
 800244c:	200000b0 	.word	0x200000b0
 8002450:	20000088 	.word	0x20000088

08002454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002458:	b672      	cpsid	i
}
 800245a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <Error_Handler+0x8>

08002460 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002466:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <HAL_MspInit+0x5c>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	4a14      	ldr	r2, [pc, #80]	@ (80024bc <HAL_MspInit+0x5c>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6193      	str	r3, [r2, #24]
 8002472:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <HAL_MspInit+0x5c>)
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <HAL_MspInit+0x5c>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	4a0e      	ldr	r2, [pc, #56]	@ (80024bc <HAL_MspInit+0x5c>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002488:	61d3      	str	r3, [r2, #28]
 800248a:	4b0c      	ldr	r3, [pc, #48]	@ (80024bc <HAL_MspInit+0x5c>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002496:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <HAL_MspInit+0x60>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	4a04      	ldr	r2, [pc, #16]	@ (80024c0 <HAL_MspInit+0x60>)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40010000 	.word	0x40010000

080024c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0310 	add.w	r3, r7, #16
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a28      	ldr	r2, [pc, #160]	@ (8002580 <HAL_ADC_MspInit+0xbc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d149      	bne.n	8002578 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024e4:	4b27      	ldr	r3, [pc, #156]	@ (8002584 <HAL_ADC_MspInit+0xc0>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	4a26      	ldr	r2, [pc, #152]	@ (8002584 <HAL_ADC_MspInit+0xc0>)
 80024ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024ee:	6193      	str	r3, [r2, #24]
 80024f0:	4b24      	ldr	r3, [pc, #144]	@ (8002584 <HAL_ADC_MspInit+0xc0>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fc:	4b21      	ldr	r3, [pc, #132]	@ (8002584 <HAL_ADC_MspInit+0xc0>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a20      	ldr	r2, [pc, #128]	@ (8002584 <HAL_ADC_MspInit+0xc0>)
 8002502:	f043 0304 	orr.w	r3, r3, #4
 8002506:	6193      	str	r3, [r2, #24]
 8002508:	4b1e      	ldr	r3, [pc, #120]	@ (8002584 <HAL_ADC_MspInit+0xc0>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = acsIN_Pin;
 8002514:	2304      	movs	r3, #4
 8002516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002518:	2303      	movs	r3, #3
 800251a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(acsIN_GPIO_Port, &GPIO_InitStruct);
 800251c:	f107 0310 	add.w	r3, r7, #16
 8002520:	4619      	mov	r1, r3
 8002522:	4819      	ldr	r0, [pc, #100]	@ (8002588 <HAL_ADC_MspInit+0xc4>)
 8002524:	f001 fb76 	bl	8003c14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002528:	4b18      	ldr	r3, [pc, #96]	@ (800258c <HAL_ADC_MspInit+0xc8>)
 800252a:	4a19      	ldr	r2, [pc, #100]	@ (8002590 <HAL_ADC_MspInit+0xcc>)
 800252c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800252e:	4b17      	ldr	r3, [pc, #92]	@ (800258c <HAL_ADC_MspInit+0xc8>)
 8002530:	2200      	movs	r2, #0
 8002532:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002534:	4b15      	ldr	r3, [pc, #84]	@ (800258c <HAL_ADC_MspInit+0xc8>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800253a:	4b14      	ldr	r3, [pc, #80]	@ (800258c <HAL_ADC_MspInit+0xc8>)
 800253c:	2280      	movs	r2, #128	@ 0x80
 800253e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002540:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_ADC_MspInit+0xc8>)
 8002542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002546:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002548:	4b10      	ldr	r3, [pc, #64]	@ (800258c <HAL_ADC_MspInit+0xc8>)
 800254a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800254e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002550:	4b0e      	ldr	r3, [pc, #56]	@ (800258c <HAL_ADC_MspInit+0xc8>)
 8002552:	2220      	movs	r2, #32
 8002554:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002556:	4b0d      	ldr	r3, [pc, #52]	@ (800258c <HAL_ADC_MspInit+0xc8>)
 8002558:	2200      	movs	r2, #0
 800255a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800255c:	480b      	ldr	r0, [pc, #44]	@ (800258c <HAL_ADC_MspInit+0xc8>)
 800255e:	f001 f8b7 	bl	80036d0 <HAL_DMA_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002568:	f7ff ff74 	bl	8002454 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a07      	ldr	r2, [pc, #28]	@ (800258c <HAL_ADC_MspInit+0xc8>)
 8002570:	621a      	str	r2, [r3, #32]
 8002572:	4a06      	ldr	r2, [pc, #24]	@ (800258c <HAL_ADC_MspInit+0xc8>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002578:	bf00      	nop
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40012400 	.word	0x40012400
 8002584:	40021000 	.word	0x40021000
 8002588:	40010800 	.word	0x40010800
 800258c:	2000012c 	.word	0x2000012c
 8002590:	40020008 	.word	0x40020008

08002594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a5e      	ldr	r2, [pc, #376]	@ (800271c <HAL_TIM_Base_MspInit+0x188>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d15c      	bne.n	8002660 <HAL_TIM_Base_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025a6:	4b5e      	ldr	r3, [pc, #376]	@ (8002720 <HAL_TIM_Base_MspInit+0x18c>)
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002720 <HAL_TIM_Base_MspInit+0x18c>)
 80025ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025b0:	6193      	str	r3, [r2, #24]
 80025b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002720 <HAL_TIM_Base_MspInit+0x18c>)
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80025be:	4b59      	ldr	r3, [pc, #356]	@ (8002724 <HAL_TIM_Base_MspInit+0x190>)
 80025c0:	4a59      	ldr	r2, [pc, #356]	@ (8002728 <HAL_TIM_Base_MspInit+0x194>)
 80025c2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025c4:	4b57      	ldr	r3, [pc, #348]	@ (8002724 <HAL_TIM_Base_MspInit+0x190>)
 80025c6:	2210      	movs	r2, #16
 80025c8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ca:	4b56      	ldr	r3, [pc, #344]	@ (8002724 <HAL_TIM_Base_MspInit+0x190>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80025d0:	4b54      	ldr	r3, [pc, #336]	@ (8002724 <HAL_TIM_Base_MspInit+0x190>)
 80025d2:	2280      	movs	r2, #128	@ 0x80
 80025d4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025d6:	4b53      	ldr	r3, [pc, #332]	@ (8002724 <HAL_TIM_Base_MspInit+0x190>)
 80025d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025dc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025de:	4b51      	ldr	r3, [pc, #324]	@ (8002724 <HAL_TIM_Base_MspInit+0x190>)
 80025e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025e4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80025e6:	4b4f      	ldr	r3, [pc, #316]	@ (8002724 <HAL_TIM_Base_MspInit+0x190>)
 80025e8:	2220      	movs	r2, #32
 80025ea:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80025ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002724 <HAL_TIM_Base_MspInit+0x190>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80025f2:	484c      	ldr	r0, [pc, #304]	@ (8002724 <HAL_TIM_Base_MspInit+0x190>)
 80025f4:	f001 f86c 	bl	80036d0 <HAL_DMA_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80025fe:	f7ff ff29 	bl	8002454 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a47      	ldr	r2, [pc, #284]	@ (8002724 <HAL_TIM_Base_MspInit+0x190>)
 8002606:	625a      	str	r2, [r3, #36]	@ 0x24
 8002608:	4a46      	ldr	r2, [pc, #280]	@ (8002724 <HAL_TIM_Base_MspInit+0x190>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel6;
 800260e:	4b47      	ldr	r3, [pc, #284]	@ (800272c <HAL_TIM_Base_MspInit+0x198>)
 8002610:	4a47      	ldr	r2, [pc, #284]	@ (8002730 <HAL_TIM_Base_MspInit+0x19c>)
 8002612:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002614:	4b45      	ldr	r3, [pc, #276]	@ (800272c <HAL_TIM_Base_MspInit+0x198>)
 8002616:	2210      	movs	r2, #16
 8002618:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800261a:	4b44      	ldr	r3, [pc, #272]	@ (800272c <HAL_TIM_Base_MspInit+0x198>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002620:	4b42      	ldr	r3, [pc, #264]	@ (800272c <HAL_TIM_Base_MspInit+0x198>)
 8002622:	2280      	movs	r2, #128	@ 0x80
 8002624:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002626:	4b41      	ldr	r3, [pc, #260]	@ (800272c <HAL_TIM_Base_MspInit+0x198>)
 8002628:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800262c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800262e:	4b3f      	ldr	r3, [pc, #252]	@ (800272c <HAL_TIM_Base_MspInit+0x198>)
 8002630:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002634:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 8002636:	4b3d      	ldr	r3, [pc, #244]	@ (800272c <HAL_TIM_Base_MspInit+0x198>)
 8002638:	2220      	movs	r2, #32
 800263a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800263c:	4b3b      	ldr	r3, [pc, #236]	@ (800272c <HAL_TIM_Base_MspInit+0x198>)
 800263e:	2200      	movs	r2, #0
 8002640:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8002642:	483a      	ldr	r0, [pc, #232]	@ (800272c <HAL_TIM_Base_MspInit+0x198>)
 8002644:	f001 f844 	bl	80036d0 <HAL_DMA_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 800264e:	f7ff ff01 	bl	8002454 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a35      	ldr	r2, [pc, #212]	@ (800272c <HAL_TIM_Base_MspInit+0x198>)
 8002656:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002658:	4a34      	ldr	r2, [pc, #208]	@ (800272c <HAL_TIM_Base_MspInit+0x198>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800265e:	e058      	b.n	8002712 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002668:	d13a      	bne.n	80026e0 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800266a:	4b2d      	ldr	r3, [pc, #180]	@ (8002720 <HAL_TIM_Base_MspInit+0x18c>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	4a2c      	ldr	r2, [pc, #176]	@ (8002720 <HAL_TIM_Base_MspInit+0x18c>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	61d3      	str	r3, [r2, #28]
 8002676:	4b2a      	ldr	r3, [pc, #168]	@ (8002720 <HAL_TIM_Base_MspInit+0x18c>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8002682:	4b2c      	ldr	r3, [pc, #176]	@ (8002734 <HAL_TIM_Base_MspInit+0x1a0>)
 8002684:	4a2c      	ldr	r2, [pc, #176]	@ (8002738 <HAL_TIM_Base_MspInit+0x1a4>)
 8002686:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002688:	4b2a      	ldr	r3, [pc, #168]	@ (8002734 <HAL_TIM_Base_MspInit+0x1a0>)
 800268a:	2210      	movs	r2, #16
 800268c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800268e:	4b29      	ldr	r3, [pc, #164]	@ (8002734 <HAL_TIM_Base_MspInit+0x1a0>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002694:	4b27      	ldr	r3, [pc, #156]	@ (8002734 <HAL_TIM_Base_MspInit+0x1a0>)
 8002696:	2280      	movs	r2, #128	@ 0x80
 8002698:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800269a:	4b26      	ldr	r3, [pc, #152]	@ (8002734 <HAL_TIM_Base_MspInit+0x1a0>)
 800269c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026a0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026a2:	4b24      	ldr	r3, [pc, #144]	@ (8002734 <HAL_TIM_Base_MspInit+0x1a0>)
 80026a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026a8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 80026aa:	4b22      	ldr	r3, [pc, #136]	@ (8002734 <HAL_TIM_Base_MspInit+0x1a0>)
 80026ac:	2220      	movs	r2, #32
 80026ae:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80026b0:	4b20      	ldr	r3, [pc, #128]	@ (8002734 <HAL_TIM_Base_MspInit+0x1a0>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80026b6:	481f      	ldr	r0, [pc, #124]	@ (8002734 <HAL_TIM_Base_MspInit+0x1a0>)
 80026b8:	f001 f80a 	bl	80036d0 <HAL_DMA_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_TIM_Base_MspInit+0x132>
      Error_Handler();
 80026c2:	f7ff fec7 	bl	8002454 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002734 <HAL_TIM_Base_MspInit+0x1a0>)
 80026ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80026cc:	4a19      	ldr	r2, [pc, #100]	@ (8002734 <HAL_TIM_Base_MspInit+0x1a0>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a17      	ldr	r2, [pc, #92]	@ (8002734 <HAL_TIM_Base_MspInit+0x1a0>)
 80026d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80026d8:	4a16      	ldr	r2, [pc, #88]	@ (8002734 <HAL_TIM_Base_MspInit+0x1a0>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80026de:	e018      	b.n	8002712 <HAL_TIM_Base_MspInit+0x17e>
  else if(htim_base->Instance==TIM4)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a15      	ldr	r2, [pc, #84]	@ (800273c <HAL_TIM_Base_MspInit+0x1a8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d113      	bne.n	8002712 <HAL_TIM_Base_MspInit+0x17e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002720 <HAL_TIM_Base_MspInit+0x18c>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002720 <HAL_TIM_Base_MspInit+0x18c>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	61d3      	str	r3, [r2, #28]
 80026f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <HAL_TIM_Base_MspInit+0x18c>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	2102      	movs	r1, #2
 8002706:	201e      	movs	r0, #30
 8002708:	f000 ffab 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800270c:	201e      	movs	r0, #30
 800270e:	f000 ffc4 	bl	800369a <HAL_NVIC_EnableIRQ>
}
 8002712:	bf00      	nop
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40012c00 	.word	0x40012c00
 8002720:	40021000 	.word	0x40021000
 8002724:	20000290 	.word	0x20000290
 8002728:	4002001c 	.word	0x4002001c
 800272c:	200002d4 	.word	0x200002d4
 8002730:	4002006c 	.word	0x4002006c
 8002734:	20000318 	.word	0x20000318
 8002738:	40020080 	.word	0x40020080
 800273c:	40000800 	.word	0x40000800

08002740 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0310 	add.w	r3, r7, #16
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a15      	ldr	r2, [pc, #84]	@ (80027b0 <HAL_TIM_Encoder_MspInit+0x70>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d123      	bne.n	80027a8 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002760:	4b14      	ldr	r3, [pc, #80]	@ (80027b4 <HAL_TIM_Encoder_MspInit+0x74>)
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	4a13      	ldr	r2, [pc, #76]	@ (80027b4 <HAL_TIM_Encoder_MspInit+0x74>)
 8002766:	f043 0302 	orr.w	r3, r3, #2
 800276a:	61d3      	str	r3, [r2, #28]
 800276c:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <HAL_TIM_Encoder_MspInit+0x74>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002778:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <HAL_TIM_Encoder_MspInit+0x74>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4a0d      	ldr	r2, [pc, #52]	@ (80027b4 <HAL_TIM_Encoder_MspInit+0x74>)
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	6193      	str	r3, [r2, #24]
 8002784:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_TIM_Encoder_MspInit+0x74>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002790:	23c0      	movs	r3, #192	@ 0xc0
 8002792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279c:	f107 0310 	add.w	r3, r7, #16
 80027a0:	4619      	mov	r1, r3
 80027a2:	4805      	ldr	r0, [pc, #20]	@ (80027b8 <HAL_TIM_Encoder_MspInit+0x78>)
 80027a4:	f001 fa36 	bl	8003c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027a8:	bf00      	nop
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40000400 	.word	0x40000400
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40010800 	.word	0x40010800

080027bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002854 <HAL_TIM_MspPostInit+0x98>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d119      	bne.n	8002810 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002858 <HAL_TIM_MspPostInit+0x9c>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002858 <HAL_TIM_MspPostInit+0x9c>)
 80027e2:	f043 0304 	orr.w	r3, r3, #4
 80027e6:	6193      	str	r3, [r2, #24]
 80027e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002858 <HAL_TIM_MspPostInit+0x9c>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = pwmRED_Pin|pwmBLACK_Pin;
 80027f4:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80027f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002802:	f107 0310 	add.w	r3, r7, #16
 8002806:	4619      	mov	r1, r3
 8002808:	4814      	ldr	r0, [pc, #80]	@ (800285c <HAL_TIM_MspPostInit+0xa0>)
 800280a:	f001 fa03 	bl	8003c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800280e:	e01c      	b.n	800284a <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002818:	d117      	bne.n	800284a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281a:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <HAL_TIM_MspPostInit+0x9c>)
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	4a0e      	ldr	r2, [pc, #56]	@ (8002858 <HAL_TIM_MspPostInit+0x9c>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6193      	str	r3, [r2, #24]
 8002826:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <HAL_TIM_MspPostInit+0x9c>)
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMout_Pin;
 8002832:	2302      	movs	r3, #2
 8002834:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	2302      	movs	r3, #2
 8002838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMout_GPIO_Port, &GPIO_InitStruct);
 800283e:	f107 0310 	add.w	r3, r7, #16
 8002842:	4619      	mov	r1, r3
 8002844:	4805      	ldr	r0, [pc, #20]	@ (800285c <HAL_TIM_MspPostInit+0xa0>)
 8002846:	f001 f9e5 	bl	8003c14 <HAL_GPIO_Init>
}
 800284a:	bf00      	nop
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40012c00 	.word	0x40012c00
 8002858:	40021000 	.word	0x40021000
 800285c:	40010800 	.word	0x40010800

08002860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	@ 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a39      	ldr	r2, [pc, #228]	@ (8002960 <HAL_UART_MspInit+0x100>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d16b      	bne.n	8002958 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002880:	4b38      	ldr	r3, [pc, #224]	@ (8002964 <HAL_UART_MspInit+0x104>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4a37      	ldr	r2, [pc, #220]	@ (8002964 <HAL_UART_MspInit+0x104>)
 8002886:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800288a:	6193      	str	r3, [r2, #24]
 800288c:	4b35      	ldr	r3, [pc, #212]	@ (8002964 <HAL_UART_MspInit+0x104>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002898:	4b32      	ldr	r3, [pc, #200]	@ (8002964 <HAL_UART_MspInit+0x104>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	4a31      	ldr	r2, [pc, #196]	@ (8002964 <HAL_UART_MspInit+0x104>)
 800289e:	f043 0308 	orr.w	r3, r3, #8
 80028a2:	6193      	str	r3, [r2, #24]
 80028a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002964 <HAL_UART_MspInit+0x104>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LORA_TX_Pin;
 80028b0:	2340      	movs	r3, #64	@ 0x40
 80028b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028b8:	2303      	movs	r3, #3
 80028ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LORA_TX_GPIO_Port, &GPIO_InitStruct);
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4619      	mov	r1, r3
 80028c2:	4829      	ldr	r0, [pc, #164]	@ (8002968 <HAL_UART_MspInit+0x108>)
 80028c4:	f001 f9a6 	bl	8003c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LORA_RX_Pin;
 80028c8:	2380      	movs	r3, #128	@ 0x80
 80028ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LORA_RX_GPIO_Port, &GPIO_InitStruct);
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	4619      	mov	r1, r3
 80028da:	4823      	ldr	r0, [pc, #140]	@ (8002968 <HAL_UART_MspInit+0x108>)
 80028dc:	f001 f99a 	bl	8003c14 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80028e0:	4b22      	ldr	r3, [pc, #136]	@ (800296c <HAL_UART_MspInit+0x10c>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f6:	4a1d      	ldr	r2, [pc, #116]	@ (800296c <HAL_UART_MspInit+0x10c>)
 80028f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fa:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80028fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002970 <HAL_UART_MspInit+0x110>)
 80028fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002974 <HAL_UART_MspInit+0x114>)
 8002900:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002902:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <HAL_UART_MspInit+0x110>)
 8002904:	2200      	movs	r2, #0
 8002906:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002908:	4b19      	ldr	r3, [pc, #100]	@ (8002970 <HAL_UART_MspInit+0x110>)
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800290e:	4b18      	ldr	r3, [pc, #96]	@ (8002970 <HAL_UART_MspInit+0x110>)
 8002910:	2280      	movs	r2, #128	@ 0x80
 8002912:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002914:	4b16      	ldr	r3, [pc, #88]	@ (8002970 <HAL_UART_MspInit+0x110>)
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800291a:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <HAL_UART_MspInit+0x110>)
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002920:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <HAL_UART_MspInit+0x110>)
 8002922:	2220      	movs	r2, #32
 8002924:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002926:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <HAL_UART_MspInit+0x110>)
 8002928:	2200      	movs	r2, #0
 800292a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800292c:	4810      	ldr	r0, [pc, #64]	@ (8002970 <HAL_UART_MspInit+0x110>)
 800292e:	f000 fecf 	bl	80036d0 <HAL_DMA_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8002938:	f7ff fd8c 	bl	8002454 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a0c      	ldr	r2, [pc, #48]	@ (8002970 <HAL_UART_MspInit+0x110>)
 8002940:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002942:	4a0b      	ldr	r2, [pc, #44]	@ (8002970 <HAL_UART_MspInit+0x110>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002948:	2200      	movs	r2, #0
 800294a:	2100      	movs	r1, #0
 800294c:	2025      	movs	r0, #37	@ 0x25
 800294e:	f000 fe88 	bl	8003662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002952:	2025      	movs	r0, #37	@ 0x25
 8002954:	f000 fea1 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002958:	bf00      	nop
 800295a:	3728      	adds	r7, #40	@ 0x28
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40013800 	.word	0x40013800
 8002964:	40021000 	.word	0x40021000
 8002968:	40010c00 	.word	0x40010c00
 800296c:	40010000 	.word	0x40010000
 8002970:	200003a4 	.word	0x200003a4
 8002974:	40020058 	.word	0x40020058

08002978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800297c:	bf00      	nop
 800297e:	e7fd      	b.n	800297c <NMI_Handler+0x4>

08002980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <HardFault_Handler+0x4>

08002988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298c:	bf00      	nop
 800298e:	e7fd      	b.n	800298c <MemManage_Handler+0x4>

08002990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <BusFault_Handler+0x4>

08002998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <UsageFault_Handler+0x4>

080029a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c8:	f000 f8ba 	bl	8002b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029d4:	4802      	ldr	r0, [pc, #8]	@ (80029e0 <DMA1_Channel1_IRQHandler+0x10>)
 80029d6:	f000 ffe9 	bl	80039ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	2000012c 	.word	0x2000012c

080029e4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80029e8:	4802      	ldr	r0, [pc, #8]	@ (80029f4 <DMA1_Channel2_IRQHandler+0x10>)
 80029ea:	f000 ffdf 	bl	80039ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000290 	.word	0x20000290

080029f8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80029fc:	4802      	ldr	r0, [pc, #8]	@ (8002a08 <DMA1_Channel5_IRQHandler+0x10>)
 80029fe:	f000 ffd5 	bl	80039ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200003a4 	.word	0x200003a4

08002a0c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8002a10:	4802      	ldr	r0, [pc, #8]	@ (8002a1c <DMA1_Channel6_IRQHandler+0x10>)
 8002a12:	f000 ffcb 	bl	80039ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200002d4 	.word	0x200002d4

08002a20 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002a24:	4802      	ldr	r0, [pc, #8]	@ (8002a30 <DMA1_Channel7_IRQHandler+0x10>)
 8002a26:	f000 ffc1 	bl	80039ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000318 	.word	0x20000318

08002a34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a38:	4802      	ldr	r0, [pc, #8]	@ (8002a44 <TIM4_IRQHandler+0x10>)
 8002a3a:	f002 fbcf 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000248 	.word	0x20000248

08002a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a4c:	4802      	ldr	r0, [pc, #8]	@ (8002a58 <USART1_IRQHandler+0x10>)
 8002a4e:	f003 fb37 	bl	80060c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	2000035c 	.word	0x2000035c

08002a5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
	}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a68:	f7ff fff8 	bl	8002a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a6c:	480b      	ldr	r0, [pc, #44]	@ (8002a9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a6e:	490c      	ldr	r1, [pc, #48]	@ (8002aa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a70:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a74:	e002      	b.n	8002a7c <LoopCopyDataInit>

08002a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a7a:	3304      	adds	r3, #4

08002a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a80:	d3f9      	bcc.n	8002a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a82:	4a09      	ldr	r2, [pc, #36]	@ (8002aa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a84:	4c09      	ldr	r4, [pc, #36]	@ (8002aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a88:	e001      	b.n	8002a8e <LoopFillZerobss>

08002a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a8c:	3204      	adds	r2, #4

08002a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a90:	d3fb      	bcc.n	8002a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a92:	f004 f9bd 	bl	8006e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a96:	f7fe fcdf 	bl	8001458 <main>
  bx lr
 8002a9a:	4770      	bx	lr
  ldr r0, =_sdata
 8002a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002aa4:	08006eb8 	.word	0x08006eb8
  ldr r2, =_sbss
 8002aa8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002aac:	200003ec 	.word	0x200003ec

08002ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ab0:	e7fe      	b.n	8002ab0 <ADC1_2_IRQHandler>
	...

08002ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ab8:	4b08      	ldr	r3, [pc, #32]	@ (8002adc <HAL_Init+0x28>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a07      	ldr	r2, [pc, #28]	@ (8002adc <HAL_Init+0x28>)
 8002abe:	f043 0310 	orr.w	r3, r3, #16
 8002ac2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	f000 fdc1 	bl	800364c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f000 f808 	bl	8002ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ad0:	f7ff fcc6 	bl	8002460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40022000 	.word	0x40022000

08002ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ae8:	4b12      	ldr	r3, [pc, #72]	@ (8002b34 <HAL_InitTick+0x54>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4b12      	ldr	r3, [pc, #72]	@ (8002b38 <HAL_InitTick+0x58>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	4619      	mov	r1, r3
 8002af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fdd9 	bl	80036b6 <HAL_SYSTICK_Config>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00e      	b.n	8002b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b0f      	cmp	r3, #15
 8002b12:	d80a      	bhi.n	8002b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b14:	2200      	movs	r2, #0
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1c:	f000 fda1 	bl	8003662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b20:	4a06      	ldr	r2, [pc, #24]	@ (8002b3c <HAL_InitTick+0x5c>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e000      	b.n	8002b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000054 	.word	0x20000054
 8002b38:	2000005c 	.word	0x2000005c
 8002b3c:	20000058 	.word	0x20000058

08002b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b44:	4b05      	ldr	r3, [pc, #20]	@ (8002b5c <HAL_IncTick+0x1c>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_IncTick+0x20>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4413      	add	r3, r2
 8002b50:	4a03      	ldr	r2, [pc, #12]	@ (8002b60 <HAL_IncTick+0x20>)
 8002b52:	6013      	str	r3, [r2, #0]
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	2000005c 	.word	0x2000005c
 8002b60:	200003e8 	.word	0x200003e8

08002b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return uwTick;
 8002b68:	4b02      	ldr	r3, [pc, #8]	@ (8002b74 <HAL_GetTick+0x10>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	200003e8 	.word	0x200003e8

08002b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b80:	f7ff fff0 	bl	8002b64 <HAL_GetTick>
 8002b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d005      	beq.n	8002b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b92:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <HAL_Delay+0x44>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b9e:	bf00      	nop
 8002ba0:	f7ff ffe0 	bl	8002b64 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d8f7      	bhi.n	8002ba0 <HAL_Delay+0x28>
  {
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	2000005c 	.word	0x2000005c

08002bc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e0be      	b.n	8002d60 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff fc60 	bl	80024c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 faff 	bl	8003208 <ADC_ConversionStop_Disable>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f040 8099 	bne.w	8002d4e <HAL_ADC_Init+0x18e>
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f040 8095 	bne.w	8002d4e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c28:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c2c:	f023 0302 	bic.w	r3, r3, #2
 8002c30:	f043 0202 	orr.w	r2, r3, #2
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	7b1b      	ldrb	r3, [r3, #12]
 8002c46:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c48:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c58:	d003      	beq.n	8002c62 <HAL_ADC_Init+0xa2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d102      	bne.n	8002c68 <HAL_ADC_Init+0xa8>
 8002c62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c66:	e000      	b.n	8002c6a <HAL_ADC_Init+0xaa>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7d1b      	ldrb	r3, [r3, #20]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d119      	bne.n	8002cac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7b1b      	ldrb	r3, [r3, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d109      	bne.n	8002c94 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	035a      	lsls	r2, r3, #13
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	e00b      	b.n	8002cac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c98:	f043 0220 	orr.w	r2, r3, #32
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca4:	f043 0201 	orr.w	r2, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	4b28      	ldr	r3, [pc, #160]	@ (8002d68 <HAL_ADC_Init+0x1a8>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cdc:	d003      	beq.n	8002ce6 <HAL_ADC_Init+0x126>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d104      	bne.n	8002cf0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	051b      	lsls	r3, r3, #20
 8002cee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	4b18      	ldr	r3, [pc, #96]	@ (8002d6c <HAL_ADC_Init+0x1ac>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d10b      	bne.n	8002d2c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1e:	f023 0303 	bic.w	r3, r3, #3
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d2a:	e018      	b.n	8002d5e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d30:	f023 0312 	bic.w	r3, r3, #18
 8002d34:	f043 0210 	orr.w	r2, r3, #16
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d40:	f043 0201 	orr.w	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d4c:	e007      	b.n	8002d5e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d52:	f043 0210 	orr.w	r2, r3, #16
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	ffe1f7fd 	.word	0xffe1f7fd
 8002d6c:	ff1f0efe 	.word	0xff1f0efe

08002d70 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a64      	ldr	r2, [pc, #400]	@ (8002f18 <HAL_ADC_Start_DMA+0x1a8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_ADC_Start_DMA+0x24>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a63      	ldr	r2, [pc, #396]	@ (8002f1c <HAL_ADC_Start_DMA+0x1ac>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d106      	bne.n	8002da2 <HAL_ADC_Start_DMA+0x32>
 8002d94:	4b60      	ldr	r3, [pc, #384]	@ (8002f18 <HAL_ADC_Start_DMA+0x1a8>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f040 80b3 	bne.w	8002f08 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_ADC_Start_DMA+0x40>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e0ae      	b.n	8002f0e <HAL_ADC_Start_DMA+0x19e>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f9cb 	bl	8003154 <ADC_Enable>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 809a 	bne.w	8002efe <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002dd2:	f023 0301 	bic.w	r3, r3, #1
 8002dd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a4e      	ldr	r2, [pc, #312]	@ (8002f1c <HAL_ADC_Start_DMA+0x1ac>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d105      	bne.n	8002df4 <HAL_ADC_Start_DMA+0x84>
 8002de8:	4b4b      	ldr	r3, [pc, #300]	@ (8002f18 <HAL_ADC_Start_DMA+0x1a8>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d115      	bne.n	8002e20 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d026      	beq.n	8002e5c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e12:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e16:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e1e:	e01d      	b.n	8002e5c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e24:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a39      	ldr	r2, [pc, #228]	@ (8002f18 <HAL_ADC_Start_DMA+0x1a8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d004      	beq.n	8002e40 <HAL_ADC_Start_DMA+0xd0>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a38      	ldr	r2, [pc, #224]	@ (8002f1c <HAL_ADC_Start_DMA+0x1ac>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d10d      	bne.n	8002e5c <HAL_ADC_Start_DMA+0xec>
 8002e40:	4b35      	ldr	r3, [pc, #212]	@ (8002f18 <HAL_ADC_Start_DMA+0x1a8>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e54:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	f023 0206 	bic.w	r2, r3, #6
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e74:	e002      	b.n	8002e7c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	4a25      	ldr	r2, [pc, #148]	@ (8002f20 <HAL_ADC_Start_DMA+0x1b0>)
 8002e8a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4a24      	ldr	r2, [pc, #144]	@ (8002f24 <HAL_ADC_Start_DMA+0x1b4>)
 8002e92:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4a23      	ldr	r2, [pc, #140]	@ (8002f28 <HAL_ADC_Start_DMA+0x1b8>)
 8002e9a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0202 	mvn.w	r2, #2
 8002ea4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eb4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a18      	ldr	r0, [r3, #32]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	334c      	adds	r3, #76	@ 0x4c
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f000 fc5d 	bl	8003784 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002ed4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002ed8:	d108      	bne.n	8002eec <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002ee8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002eea:	e00f      	b.n	8002f0c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002efa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002efc:	e006      	b.n	8002f0c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002f06:	e001      	b.n	8002f0c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40012400 	.word	0x40012400
 8002f1c:	40012800 	.word	0x40012800
 8002f20:	0800328b 	.word	0x0800328b
 8002f24:	08003307 	.word	0x08003307
 8002f28:	08003323 	.word	0x08003323

08002f2c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x20>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e0dc      	b.n	800313e <HAL_ADC_ConfigChannel+0x1da>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b06      	cmp	r3, #6
 8002f92:	d81c      	bhi.n	8002fce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3b05      	subs	r3, #5
 8002fa6:	221f      	movs	r2, #31
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	4019      	ands	r1, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3b05      	subs	r3, #5
 8002fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fcc:	e03c      	b.n	8003048 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d81c      	bhi.n	8003010 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3b23      	subs	r3, #35	@ 0x23
 8002fe8:	221f      	movs	r2, #31
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	4019      	ands	r1, r3
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	3b23      	subs	r3, #35	@ 0x23
 8003002:	fa00 f203 	lsl.w	r2, r0, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	631a      	str	r2, [r3, #48]	@ 0x30
 800300e:	e01b      	b.n	8003048 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	3b41      	subs	r3, #65	@ 0x41
 8003022:	221f      	movs	r2, #31
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	4019      	ands	r1, r3
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	3b41      	subs	r3, #65	@ 0x41
 800303c:	fa00 f203 	lsl.w	r2, r0, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b09      	cmp	r3, #9
 800304e:	d91c      	bls.n	800308a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68d9      	ldr	r1, [r3, #12]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	4613      	mov	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	3b1e      	subs	r3, #30
 8003062:	2207      	movs	r2, #7
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	4019      	ands	r1, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6898      	ldr	r0, [r3, #8]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	3b1e      	subs	r3, #30
 800307c:	fa00 f203 	lsl.w	r2, r0, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	60da      	str	r2, [r3, #12]
 8003088:	e019      	b.n	80030be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6919      	ldr	r1, [r3, #16]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	2207      	movs	r2, #7
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	4019      	ands	r1, r3
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	6898      	ldr	r0, [r3, #8]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	fa00 f203 	lsl.w	r2, r0, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d003      	beq.n	80030ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030ca:	2b11      	cmp	r3, #17
 80030cc:	d132      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003148 <HAL_ADC_ConfigChannel+0x1e4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d125      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d126      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80030f4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d11a      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030fe:	4b13      	ldr	r3, [pc, #76]	@ (800314c <HAL_ADC_ConfigChannel+0x1e8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a13      	ldr	r2, [pc, #76]	@ (8003150 <HAL_ADC_ConfigChannel+0x1ec>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	0c9a      	lsrs	r2, r3, #18
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003114:	e002      	b.n	800311c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	3b01      	subs	r3, #1
 800311a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f9      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x1b2>
 8003122:	e007      	b.n	8003134 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003128:	f043 0220 	orr.w	r2, r3, #32
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800313c:	7bfb      	ldrb	r3, [r7, #15]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	40012400 	.word	0x40012400
 800314c:	20000054 	.word	0x20000054
 8003150:	431bde83 	.word	0x431bde83

08003154 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b01      	cmp	r3, #1
 8003170:	d040      	beq.n	80031f4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003182:	4b1f      	ldr	r3, [pc, #124]	@ (8003200 <ADC_Enable+0xac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1f      	ldr	r2, [pc, #124]	@ (8003204 <ADC_Enable+0xb0>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	0c9b      	lsrs	r3, r3, #18
 800318e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003190:	e002      	b.n	8003198 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	3b01      	subs	r3, #1
 8003196:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f9      	bne.n	8003192 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800319e:	f7ff fce1 	bl	8002b64 <HAL_GetTick>
 80031a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031a4:	e01f      	b.n	80031e6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031a6:	f7ff fcdd 	bl	8002b64 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d918      	bls.n	80031e6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d011      	beq.n	80031e6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c6:	f043 0210 	orr.w	r2, r3, #16
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d2:	f043 0201 	orr.w	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e007      	b.n	80031f6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d1d8      	bne.n	80031a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000054 	.word	0x20000054
 8003204:	431bde83 	.word	0x431bde83

08003208 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d12e      	bne.n	8003280 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003232:	f7ff fc97 	bl	8002b64 <HAL_GetTick>
 8003236:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003238:	e01b      	b.n	8003272 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800323a:	f7ff fc93 	bl	8002b64 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d914      	bls.n	8003272 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b01      	cmp	r3, #1
 8003254:	d10d      	bne.n	8003272 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325a:	f043 0210 	orr.w	r2, r3, #16
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003266:	f043 0201 	orr.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e007      	b.n	8003282 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d0dc      	beq.n	800323a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d127      	bne.n	80032f4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80032ba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80032be:	d115      	bne.n	80032ec <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d111      	bne.n	80032ec <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e4:	f043 0201 	orr.w	r2, r3, #1
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7ff fe1d 	bl	8002f2c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80032f2:	e004      	b.n	80032fe <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	4798      	blx	r3
}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f7ff fe12 	bl	8002f3e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003334:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003340:	f043 0204 	orr.w	r2, r3, #4
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7ff fe01 	bl	8002f50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800334e:	bf00      	nop
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_ADCEx_Calibration_Start+0x1e>
 8003372:	2302      	movs	r3, #2
 8003374:	e097      	b.n	80034a6 <HAL_ADCEx_Calibration_Start+0x14e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ff42 	bl	8003208 <ADC_ConversionStop_Disable>
 8003384:	4603      	mov	r3, r0
 8003386:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff fee3 	bl	8003154 <ADC_Enable>
 800338e:	4603      	mov	r3, r0
 8003390:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003392:	7dfb      	ldrb	r3, [r7, #23]
 8003394:	2b00      	cmp	r3, #0
 8003396:	f040 8081 	bne.w	800349c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80033a2:	f023 0302 	bic.w	r3, r3, #2
 80033a6:	f043 0202 	orr.w	r2, r3, #2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80033ae:	4b40      	ldr	r3, [pc, #256]	@ (80034b0 <HAL_ADCEx_Calibration_Start+0x158>)
 80033b0:	681c      	ldr	r4, [r3, #0]
 80033b2:	2002      	movs	r0, #2
 80033b4:	f001 fa90 	bl	80048d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80033b8:	4603      	mov	r3, r0
 80033ba:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80033be:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80033c0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80033c2:	e002      	b.n	80033ca <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f9      	bne.n	80033c4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0208 	orr.w	r2, r2, #8
 80033de:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80033e0:	f7ff fbc0 	bl	8002b64 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80033e6:	e01b      	b.n	8003420 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80033e8:	f7ff fbbc 	bl	8002b64 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b0a      	cmp	r3, #10
 80033f4:	d914      	bls.n	8003420 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00d      	beq.n	8003420 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003408:	f023 0312 	bic.w	r3, r3, #18
 800340c:	f043 0210 	orr.w	r2, r3, #16
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e042      	b.n	80034a6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1dc      	bne.n	80033e8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0204 	orr.w	r2, r2, #4
 800343c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800343e:	f7ff fb91 	bl	8002b64 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003444:	e01b      	b.n	800347e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003446:	f7ff fb8d 	bl	8002b64 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b0a      	cmp	r3, #10
 8003452:	d914      	bls.n	800347e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00d      	beq.n	800347e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003466:	f023 0312 	bic.w	r3, r3, #18
 800346a:	f043 0210 	orr.w	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e013      	b.n	80034a6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1dc      	bne.n	8003446 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	f023 0303 	bic.w	r3, r3, #3
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd90      	pop	{r4, r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000054 	.word	0x20000054

080034b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c4:	4b0c      	ldr	r3, [pc, #48]	@ (80034f8 <__NVIC_SetPriorityGrouping+0x44>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034d0:	4013      	ands	r3, r2
 80034d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034e6:	4a04      	ldr	r2, [pc, #16]	@ (80034f8 <__NVIC_SetPriorityGrouping+0x44>)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	60d3      	str	r3, [r2, #12]
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003500:	4b04      	ldr	r3, [pc, #16]	@ (8003514 <__NVIC_GetPriorityGrouping+0x18>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	0a1b      	lsrs	r3, r3, #8
 8003506:	f003 0307 	and.w	r3, r3, #7
}
 800350a:	4618      	mov	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003526:	2b00      	cmp	r3, #0
 8003528:	db0b      	blt.n	8003542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	f003 021f 	and.w	r2, r3, #31
 8003530:	4906      	ldr	r1, [pc, #24]	@ (800354c <__NVIC_EnableIRQ+0x34>)
 8003532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	2001      	movs	r0, #1
 800353a:	fa00 f202 	lsl.w	r2, r0, r2
 800353e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	e000e100 	.word	0xe000e100

08003550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003560:	2b00      	cmp	r3, #0
 8003562:	db0a      	blt.n	800357a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	490c      	ldr	r1, [pc, #48]	@ (800359c <__NVIC_SetPriority+0x4c>)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	0112      	lsls	r2, r2, #4
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	440b      	add	r3, r1
 8003574:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003578:	e00a      	b.n	8003590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4908      	ldr	r1, [pc, #32]	@ (80035a0 <__NVIC_SetPriority+0x50>)
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	3b04      	subs	r3, #4
 8003588:	0112      	lsls	r2, r2, #4
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	440b      	add	r3, r1
 800358e:	761a      	strb	r2, [r3, #24]
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000e100 	.word	0xe000e100
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b089      	sub	sp, #36	@ 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f1c3 0307 	rsb	r3, r3, #7
 80035be:	2b04      	cmp	r3, #4
 80035c0:	bf28      	it	cs
 80035c2:	2304      	movcs	r3, #4
 80035c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d902      	bls.n	80035d4 <NVIC_EncodePriority+0x30>
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3b03      	subs	r3, #3
 80035d2:	e000      	b.n	80035d6 <NVIC_EncodePriority+0x32>
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	f04f 32ff 	mov.w	r2, #4294967295
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	401a      	ands	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ec:	f04f 31ff 	mov.w	r1, #4294967295
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	43d9      	mvns	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035fc:	4313      	orrs	r3, r2
         );
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3724      	adds	r7, #36	@ 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003618:	d301      	bcc.n	800361e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800361a:	2301      	movs	r3, #1
 800361c:	e00f      	b.n	800363e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800361e:	4a0a      	ldr	r2, [pc, #40]	@ (8003648 <SysTick_Config+0x40>)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3b01      	subs	r3, #1
 8003624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003626:	210f      	movs	r1, #15
 8003628:	f04f 30ff 	mov.w	r0, #4294967295
 800362c:	f7ff ff90 	bl	8003550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003630:	4b05      	ldr	r3, [pc, #20]	@ (8003648 <SysTick_Config+0x40>)
 8003632:	2200      	movs	r2, #0
 8003634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003636:	4b04      	ldr	r3, [pc, #16]	@ (8003648 <SysTick_Config+0x40>)
 8003638:	2207      	movs	r2, #7
 800363a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	e000e010 	.word	0xe000e010

0800364c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ff2d 	bl	80034b4 <__NVIC_SetPriorityGrouping>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003662:	b580      	push	{r7, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af00      	add	r7, sp, #0
 8003668:	4603      	mov	r3, r0
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003674:	f7ff ff42 	bl	80034fc <__NVIC_GetPriorityGrouping>
 8003678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	6978      	ldr	r0, [r7, #20]
 8003680:	f7ff ff90 	bl	80035a4 <NVIC_EncodePriority>
 8003684:	4602      	mov	r2, r0
 8003686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff5f 	bl	8003550 <__NVIC_SetPriority>
}
 8003692:	bf00      	nop
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	4603      	mov	r3, r0
 80036a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff ff35 	bl	8003518 <__NVIC_EnableIRQ>
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff ffa2 	bl	8003608 <SysTick_Config>
 80036c4:	4603      	mov	r3, r0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e043      	b.n	800376e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	4b22      	ldr	r3, [pc, #136]	@ (8003778 <HAL_DMA_Init+0xa8>)
 80036ee:	4413      	add	r3, r2
 80036f0:	4a22      	ldr	r2, [pc, #136]	@ (800377c <HAL_DMA_Init+0xac>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	009a      	lsls	r2, r3, #2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a1f      	ldr	r2, [pc, #124]	@ (8003780 <HAL_DMA_Init+0xb0>)
 8003702:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800371a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800371e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003728:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003734:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003740:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr
 8003778:	bffdfff8 	.word	0xbffdfff8
 800377c:	cccccccd 	.word	0xcccccccd
 8003780:	40020000 	.word	0x40020000

08003784 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_DMA_Start_IT+0x20>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e04b      	b.n	800383c <HAL_DMA_Start_IT+0xb8>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d13a      	bne.n	800382e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f9eb 	bl	8003bb8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 020e 	orr.w	r2, r2, #14
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e00f      	b.n	800381c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0204 	bic.w	r2, r2, #4
 800380a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 020a 	orr.w	r2, r2, #10
 800381a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e005      	b.n	800383a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003836:	2302      	movs	r3, #2
 8003838:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800383a:	7dfb      	ldrb	r3, [r7, #23]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d008      	beq.n	800386e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2204      	movs	r2, #4
 8003860:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e020      	b.n	80038b0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 020e 	bic.w	r2, r2, #14
 800387c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003896:	2101      	movs	r1, #1
 8003898:	fa01 f202 	lsl.w	r2, r1, r2
 800389c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr
	...

080038bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d005      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2204      	movs	r2, #4
 80038d8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	73fb      	strb	r3, [r7, #15]
 80038de:	e051      	b.n	8003984 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 020e 	bic.w	r2, r2, #14
 80038ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a22      	ldr	r2, [pc, #136]	@ (8003990 <HAL_DMA_Abort_IT+0xd4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d029      	beq.n	800395e <HAL_DMA_Abort_IT+0xa2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a21      	ldr	r2, [pc, #132]	@ (8003994 <HAL_DMA_Abort_IT+0xd8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d022      	beq.n	800395a <HAL_DMA_Abort_IT+0x9e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1f      	ldr	r2, [pc, #124]	@ (8003998 <HAL_DMA_Abort_IT+0xdc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01a      	beq.n	8003954 <HAL_DMA_Abort_IT+0x98>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1e      	ldr	r2, [pc, #120]	@ (800399c <HAL_DMA_Abort_IT+0xe0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d012      	beq.n	800394e <HAL_DMA_Abort_IT+0x92>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1c      	ldr	r2, [pc, #112]	@ (80039a0 <HAL_DMA_Abort_IT+0xe4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00a      	beq.n	8003948 <HAL_DMA_Abort_IT+0x8c>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1b      	ldr	r2, [pc, #108]	@ (80039a4 <HAL_DMA_Abort_IT+0xe8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d102      	bne.n	8003942 <HAL_DMA_Abort_IT+0x86>
 800393c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003940:	e00e      	b.n	8003960 <HAL_DMA_Abort_IT+0xa4>
 8003942:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003946:	e00b      	b.n	8003960 <HAL_DMA_Abort_IT+0xa4>
 8003948:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800394c:	e008      	b.n	8003960 <HAL_DMA_Abort_IT+0xa4>
 800394e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003952:	e005      	b.n	8003960 <HAL_DMA_Abort_IT+0xa4>
 8003954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003958:	e002      	b.n	8003960 <HAL_DMA_Abort_IT+0xa4>
 800395a:	2310      	movs	r3, #16
 800395c:	e000      	b.n	8003960 <HAL_DMA_Abort_IT+0xa4>
 800395e:	2301      	movs	r3, #1
 8003960:	4a11      	ldr	r2, [pc, #68]	@ (80039a8 <HAL_DMA_Abort_IT+0xec>)
 8003962:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
    } 
  }
  return status;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40020008 	.word	0x40020008
 8003994:	4002001c 	.word	0x4002001c
 8003998:	40020030 	.word	0x40020030
 800399c:	40020044 	.word	0x40020044
 80039a0:	40020058 	.word	0x40020058
 80039a4:	4002006c 	.word	0x4002006c
 80039a8:	40020000 	.word	0x40020000

080039ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c8:	2204      	movs	r2, #4
 80039ca:	409a      	lsls	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d04f      	beq.n	8003a74 <HAL_DMA_IRQHandler+0xc8>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d04a      	beq.n	8003a74 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d107      	bne.n	80039fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0204 	bic.w	r2, r2, #4
 80039fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a66      	ldr	r2, [pc, #408]	@ (8003b9c <HAL_DMA_IRQHandler+0x1f0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d029      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xae>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a65      	ldr	r2, [pc, #404]	@ (8003ba0 <HAL_DMA_IRQHandler+0x1f4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d022      	beq.n	8003a56 <HAL_DMA_IRQHandler+0xaa>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a63      	ldr	r2, [pc, #396]	@ (8003ba4 <HAL_DMA_IRQHandler+0x1f8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d01a      	beq.n	8003a50 <HAL_DMA_IRQHandler+0xa4>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a62      	ldr	r2, [pc, #392]	@ (8003ba8 <HAL_DMA_IRQHandler+0x1fc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d012      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x9e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a60      	ldr	r2, [pc, #384]	@ (8003bac <HAL_DMA_IRQHandler+0x200>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00a      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x98>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a5f      	ldr	r2, [pc, #380]	@ (8003bb0 <HAL_DMA_IRQHandler+0x204>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d102      	bne.n	8003a3e <HAL_DMA_IRQHandler+0x92>
 8003a38:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a3c:	e00e      	b.n	8003a5c <HAL_DMA_IRQHandler+0xb0>
 8003a3e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003a42:	e00b      	b.n	8003a5c <HAL_DMA_IRQHandler+0xb0>
 8003a44:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003a48:	e008      	b.n	8003a5c <HAL_DMA_IRQHandler+0xb0>
 8003a4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a4e:	e005      	b.n	8003a5c <HAL_DMA_IRQHandler+0xb0>
 8003a50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a54:	e002      	b.n	8003a5c <HAL_DMA_IRQHandler+0xb0>
 8003a56:	2340      	movs	r3, #64	@ 0x40
 8003a58:	e000      	b.n	8003a5c <HAL_DMA_IRQHandler+0xb0>
 8003a5a:	2304      	movs	r3, #4
 8003a5c:	4a55      	ldr	r2, [pc, #340]	@ (8003bb4 <HAL_DMA_IRQHandler+0x208>)
 8003a5e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8094 	beq.w	8003b92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a72:	e08e      	b.n	8003b92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	2202      	movs	r2, #2
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d056      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x186>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d051      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10b      	bne.n	8003ab4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 020a 	bic.w	r2, r2, #10
 8003aaa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a38      	ldr	r2, [pc, #224]	@ (8003b9c <HAL_DMA_IRQHandler+0x1f0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d029      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x166>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a37      	ldr	r2, [pc, #220]	@ (8003ba0 <HAL_DMA_IRQHandler+0x1f4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d022      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x162>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a35      	ldr	r2, [pc, #212]	@ (8003ba4 <HAL_DMA_IRQHandler+0x1f8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01a      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x15c>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a34      	ldr	r2, [pc, #208]	@ (8003ba8 <HAL_DMA_IRQHandler+0x1fc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d012      	beq.n	8003b02 <HAL_DMA_IRQHandler+0x156>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a32      	ldr	r2, [pc, #200]	@ (8003bac <HAL_DMA_IRQHandler+0x200>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00a      	beq.n	8003afc <HAL_DMA_IRQHandler+0x150>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a31      	ldr	r2, [pc, #196]	@ (8003bb0 <HAL_DMA_IRQHandler+0x204>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d102      	bne.n	8003af6 <HAL_DMA_IRQHandler+0x14a>
 8003af0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003af4:	e00e      	b.n	8003b14 <HAL_DMA_IRQHandler+0x168>
 8003af6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003afa:	e00b      	b.n	8003b14 <HAL_DMA_IRQHandler+0x168>
 8003afc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b00:	e008      	b.n	8003b14 <HAL_DMA_IRQHandler+0x168>
 8003b02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b06:	e005      	b.n	8003b14 <HAL_DMA_IRQHandler+0x168>
 8003b08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b0c:	e002      	b.n	8003b14 <HAL_DMA_IRQHandler+0x168>
 8003b0e:	2320      	movs	r3, #32
 8003b10:	e000      	b.n	8003b14 <HAL_DMA_IRQHandler+0x168>
 8003b12:	2302      	movs	r3, #2
 8003b14:	4a27      	ldr	r2, [pc, #156]	@ (8003bb4 <HAL_DMA_IRQHandler+0x208>)
 8003b16:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d034      	beq.n	8003b92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b30:	e02f      	b.n	8003b92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	2208      	movs	r2, #8
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d028      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x1e8>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d023      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 020e 	bic.w	r2, r2, #14
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b64:	2101      	movs	r1, #1
 8003b66:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d004      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	4798      	blx	r3
    }
  }
  return;
 8003b92:	bf00      	nop
 8003b94:	bf00      	nop
}
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40020008 	.word	0x40020008
 8003ba0:	4002001c 	.word	0x4002001c
 8003ba4:	40020030 	.word	0x40020030
 8003ba8:	40020044 	.word	0x40020044
 8003bac:	40020058 	.word	0x40020058
 8003bb0:	4002006c 	.word	0x4002006c
 8003bb4:	40020000 	.word	0x40020000

08003bb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bce:	2101      	movs	r1, #1
 8003bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d108      	bne.n	8003bf8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bf6:	e007      	b.n	8003c08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	60da      	str	r2, [r3, #12]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b08b      	sub	sp, #44	@ 0x2c
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c22:	2300      	movs	r3, #0
 8003c24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c26:	e169      	b.n	8003efc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c28:	2201      	movs	r2, #1
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	f040 8158 	bne.w	8003ef6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4a9a      	ldr	r2, [pc, #616]	@ (8003eb4 <HAL_GPIO_Init+0x2a0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d05e      	beq.n	8003d0e <HAL_GPIO_Init+0xfa>
 8003c50:	4a98      	ldr	r2, [pc, #608]	@ (8003eb4 <HAL_GPIO_Init+0x2a0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d875      	bhi.n	8003d42 <HAL_GPIO_Init+0x12e>
 8003c56:	4a98      	ldr	r2, [pc, #608]	@ (8003eb8 <HAL_GPIO_Init+0x2a4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d058      	beq.n	8003d0e <HAL_GPIO_Init+0xfa>
 8003c5c:	4a96      	ldr	r2, [pc, #600]	@ (8003eb8 <HAL_GPIO_Init+0x2a4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d86f      	bhi.n	8003d42 <HAL_GPIO_Init+0x12e>
 8003c62:	4a96      	ldr	r2, [pc, #600]	@ (8003ebc <HAL_GPIO_Init+0x2a8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d052      	beq.n	8003d0e <HAL_GPIO_Init+0xfa>
 8003c68:	4a94      	ldr	r2, [pc, #592]	@ (8003ebc <HAL_GPIO_Init+0x2a8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d869      	bhi.n	8003d42 <HAL_GPIO_Init+0x12e>
 8003c6e:	4a94      	ldr	r2, [pc, #592]	@ (8003ec0 <HAL_GPIO_Init+0x2ac>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d04c      	beq.n	8003d0e <HAL_GPIO_Init+0xfa>
 8003c74:	4a92      	ldr	r2, [pc, #584]	@ (8003ec0 <HAL_GPIO_Init+0x2ac>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d863      	bhi.n	8003d42 <HAL_GPIO_Init+0x12e>
 8003c7a:	4a92      	ldr	r2, [pc, #584]	@ (8003ec4 <HAL_GPIO_Init+0x2b0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d046      	beq.n	8003d0e <HAL_GPIO_Init+0xfa>
 8003c80:	4a90      	ldr	r2, [pc, #576]	@ (8003ec4 <HAL_GPIO_Init+0x2b0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d85d      	bhi.n	8003d42 <HAL_GPIO_Init+0x12e>
 8003c86:	2b12      	cmp	r3, #18
 8003c88:	d82a      	bhi.n	8003ce0 <HAL_GPIO_Init+0xcc>
 8003c8a:	2b12      	cmp	r3, #18
 8003c8c:	d859      	bhi.n	8003d42 <HAL_GPIO_Init+0x12e>
 8003c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c94 <HAL_GPIO_Init+0x80>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003d0f 	.word	0x08003d0f
 8003c98:	08003ce9 	.word	0x08003ce9
 8003c9c:	08003cfb 	.word	0x08003cfb
 8003ca0:	08003d3d 	.word	0x08003d3d
 8003ca4:	08003d43 	.word	0x08003d43
 8003ca8:	08003d43 	.word	0x08003d43
 8003cac:	08003d43 	.word	0x08003d43
 8003cb0:	08003d43 	.word	0x08003d43
 8003cb4:	08003d43 	.word	0x08003d43
 8003cb8:	08003d43 	.word	0x08003d43
 8003cbc:	08003d43 	.word	0x08003d43
 8003cc0:	08003d43 	.word	0x08003d43
 8003cc4:	08003d43 	.word	0x08003d43
 8003cc8:	08003d43 	.word	0x08003d43
 8003ccc:	08003d43 	.word	0x08003d43
 8003cd0:	08003d43 	.word	0x08003d43
 8003cd4:	08003d43 	.word	0x08003d43
 8003cd8:	08003cf1 	.word	0x08003cf1
 8003cdc:	08003d05 	.word	0x08003d05
 8003ce0:	4a79      	ldr	r2, [pc, #484]	@ (8003ec8 <HAL_GPIO_Init+0x2b4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d013      	beq.n	8003d0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ce6:	e02c      	b.n	8003d42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	623b      	str	r3, [r7, #32]
          break;
 8003cee:	e029      	b.n	8003d44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	623b      	str	r3, [r7, #32]
          break;
 8003cf8:	e024      	b.n	8003d44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	3308      	adds	r3, #8
 8003d00:	623b      	str	r3, [r7, #32]
          break;
 8003d02:	e01f      	b.n	8003d44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	623b      	str	r3, [r7, #32]
          break;
 8003d0c:	e01a      	b.n	8003d44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d102      	bne.n	8003d1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d16:	2304      	movs	r3, #4
 8003d18:	623b      	str	r3, [r7, #32]
          break;
 8003d1a:	e013      	b.n	8003d44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d105      	bne.n	8003d30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d24:	2308      	movs	r3, #8
 8003d26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	611a      	str	r2, [r3, #16]
          break;
 8003d2e:	e009      	b.n	8003d44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d30:	2308      	movs	r3, #8
 8003d32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	615a      	str	r2, [r3, #20]
          break;
 8003d3a:	e003      	b.n	8003d44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	623b      	str	r3, [r7, #32]
          break;
 8003d40:	e000      	b.n	8003d44 <HAL_GPIO_Init+0x130>
          break;
 8003d42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2bff      	cmp	r3, #255	@ 0xff
 8003d48:	d801      	bhi.n	8003d4e <HAL_GPIO_Init+0x13a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	e001      	b.n	8003d52 <HAL_GPIO_Init+0x13e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3304      	adds	r3, #4
 8003d52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2bff      	cmp	r3, #255	@ 0xff
 8003d58:	d802      	bhi.n	8003d60 <HAL_GPIO_Init+0x14c>
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	e002      	b.n	8003d66 <HAL_GPIO_Init+0x152>
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	3b08      	subs	r3, #8
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	210f      	movs	r1, #15
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	fa01 f303 	lsl.w	r3, r1, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	401a      	ands	r2, r3
 8003d78:	6a39      	ldr	r1, [r7, #32]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	431a      	orrs	r2, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80b1 	beq.w	8003ef6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d94:	4b4d      	ldr	r3, [pc, #308]	@ (8003ecc <HAL_GPIO_Init+0x2b8>)
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	4a4c      	ldr	r2, [pc, #304]	@ (8003ecc <HAL_GPIO_Init+0x2b8>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6193      	str	r3, [r2, #24]
 8003da0:	4b4a      	ldr	r3, [pc, #296]	@ (8003ecc <HAL_GPIO_Init+0x2b8>)
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003dac:	4a48      	ldr	r2, [pc, #288]	@ (8003ed0 <HAL_GPIO_Init+0x2bc>)
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	3302      	adds	r3, #2
 8003db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	220f      	movs	r2, #15
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a40      	ldr	r2, [pc, #256]	@ (8003ed4 <HAL_GPIO_Init+0x2c0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d013      	beq.n	8003e00 <HAL_GPIO_Init+0x1ec>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a3f      	ldr	r2, [pc, #252]	@ (8003ed8 <HAL_GPIO_Init+0x2c4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00d      	beq.n	8003dfc <HAL_GPIO_Init+0x1e8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a3e      	ldr	r2, [pc, #248]	@ (8003edc <HAL_GPIO_Init+0x2c8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d007      	beq.n	8003df8 <HAL_GPIO_Init+0x1e4>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a3d      	ldr	r2, [pc, #244]	@ (8003ee0 <HAL_GPIO_Init+0x2cc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d101      	bne.n	8003df4 <HAL_GPIO_Init+0x1e0>
 8003df0:	2303      	movs	r3, #3
 8003df2:	e006      	b.n	8003e02 <HAL_GPIO_Init+0x1ee>
 8003df4:	2304      	movs	r3, #4
 8003df6:	e004      	b.n	8003e02 <HAL_GPIO_Init+0x1ee>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e002      	b.n	8003e02 <HAL_GPIO_Init+0x1ee>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <HAL_GPIO_Init+0x1ee>
 8003e00:	2300      	movs	r3, #0
 8003e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e04:	f002 0203 	and.w	r2, r2, #3
 8003e08:	0092      	lsls	r2, r2, #2
 8003e0a:	4093      	lsls	r3, r2
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e12:	492f      	ldr	r1, [pc, #188]	@ (8003ed0 <HAL_GPIO_Init+0x2bc>)
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	089b      	lsrs	r3, r3, #2
 8003e18:	3302      	adds	r3, #2
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d006      	beq.n	8003e3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	492c      	ldr	r1, [pc, #176]	@ (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	608b      	str	r3, [r1, #8]
 8003e38:	e006      	b.n	8003e48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	4928      	ldr	r1, [pc, #160]	@ (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d006      	beq.n	8003e62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e54:	4b23      	ldr	r3, [pc, #140]	@ (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	4922      	ldr	r1, [pc, #136]	@ (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60cb      	str	r3, [r1, #12]
 8003e60:	e006      	b.n	8003e70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e62:	4b20      	ldr	r3, [pc, #128]	@ (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	491e      	ldr	r1, [pc, #120]	@ (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d006      	beq.n	8003e8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	4918      	ldr	r1, [pc, #96]	@ (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	604b      	str	r3, [r1, #4]
 8003e88:	e006      	b.n	8003e98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e8a:	4b16      	ldr	r3, [pc, #88]	@ (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	4914      	ldr	r1, [pc, #80]	@ (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d021      	beq.n	8003ee8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	490e      	ldr	r1, [pc, #56]	@ (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	600b      	str	r3, [r1, #0]
 8003eb0:	e021      	b.n	8003ef6 <HAL_GPIO_Init+0x2e2>
 8003eb2:	bf00      	nop
 8003eb4:	10320000 	.word	0x10320000
 8003eb8:	10310000 	.word	0x10310000
 8003ebc:	10220000 	.word	0x10220000
 8003ec0:	10210000 	.word	0x10210000
 8003ec4:	10120000 	.word	0x10120000
 8003ec8:	10110000 	.word	0x10110000
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	40010800 	.word	0x40010800
 8003ed8:	40010c00 	.word	0x40010c00
 8003edc:	40011000 	.word	0x40011000
 8003ee0:	40011400 	.word	0x40011400
 8003ee4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f18 <HAL_GPIO_Init+0x304>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	4909      	ldr	r1, [pc, #36]	@ (8003f18 <HAL_GPIO_Init+0x304>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	3301      	adds	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	fa22 f303 	lsr.w	r3, r2, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f47f ae8e 	bne.w	8003c28 <HAL_GPIO_Init+0x14>
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	372c      	adds	r7, #44	@ 0x2c
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	40010400 	.word	0x40010400

08003f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f2c:	787b      	ldrb	r3, [r7, #1]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f32:	887a      	ldrh	r2, [r7, #2]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f38:	e003      	b.n	8003f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f3a:	887b      	ldrh	r3, [r7, #2]
 8003f3c:	041a      	lsls	r2, r3, #16
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	611a      	str	r2, [r3, #16]
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr

08003f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e272      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 8087 	beq.w	800407a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f6c:	4b92      	ldr	r3, [pc, #584]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 030c 	and.w	r3, r3, #12
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d00c      	beq.n	8003f92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f78:	4b8f      	ldr	r3, [pc, #572]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d112      	bne.n	8003faa <HAL_RCC_OscConfig+0x5e>
 8003f84:	4b8c      	ldr	r3, [pc, #560]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f90:	d10b      	bne.n	8003faa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f92:	4b89      	ldr	r3, [pc, #548]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d06c      	beq.n	8004078 <HAL_RCC_OscConfig+0x12c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d168      	bne.n	8004078 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e24c      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fb2:	d106      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x76>
 8003fb4:	4b80      	ldr	r3, [pc, #512]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a7f      	ldr	r2, [pc, #508]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8003fba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	e02e      	b.n	8004020 <HAL_RCC_OscConfig+0xd4>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x98>
 8003fca:	4b7b      	ldr	r3, [pc, #492]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a7a      	ldr	r2, [pc, #488]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b78      	ldr	r3, [pc, #480]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a77      	ldr	r2, [pc, #476]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8003fdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e01d      	b.n	8004020 <HAL_RCC_OscConfig+0xd4>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0xbc>
 8003fee:	4b72      	ldr	r3, [pc, #456]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a71      	ldr	r2, [pc, #452]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4b6f      	ldr	r3, [pc, #444]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a6e      	ldr	r2, [pc, #440]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8004000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e00b      	b.n	8004020 <HAL_RCC_OscConfig+0xd4>
 8004008:	4b6b      	ldr	r3, [pc, #428]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a6a      	ldr	r2, [pc, #424]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 800400e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	4b68      	ldr	r3, [pc, #416]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a67      	ldr	r2, [pc, #412]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 800401a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800401e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d013      	beq.n	8004050 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004028:	f7fe fd9c 	bl	8002b64 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004030:	f7fe fd98 	bl	8002b64 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	@ 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e200      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	4b5d      	ldr	r3, [pc, #372]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0xe4>
 800404e:	e014      	b.n	800407a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004050:	f7fe fd88 	bl	8002b64 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004058:	f7fe fd84 	bl	8002b64 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b64      	cmp	r3, #100	@ 0x64
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e1ec      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406a:	4b53      	ldr	r3, [pc, #332]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x10c>
 8004076:	e000      	b.n	800407a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d063      	beq.n	800414e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004086:	4b4c      	ldr	r3, [pc, #304]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004092:	4b49      	ldr	r3, [pc, #292]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b08      	cmp	r3, #8
 800409c:	d11c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x18c>
 800409e:	4b46      	ldr	r3, [pc, #280]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d116      	bne.n	80040d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040aa:	4b43      	ldr	r3, [pc, #268]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <HAL_RCC_OscConfig+0x176>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d001      	beq.n	80040c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e1c0      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c2:	4b3d      	ldr	r3, [pc, #244]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	4939      	ldr	r1, [pc, #228]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d6:	e03a      	b.n	800414e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d020      	beq.n	8004122 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e0:	4b36      	ldr	r3, [pc, #216]	@ (80041bc <HAL_RCC_OscConfig+0x270>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e6:	f7fe fd3d 	bl	8002b64 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ee:	f7fe fd39 	bl	8002b64 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e1a1      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004100:	4b2d      	ldr	r3, [pc, #180]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0f0      	beq.n	80040ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410c:	4b2a      	ldr	r3, [pc, #168]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	4927      	ldr	r1, [pc, #156]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 800411c:	4313      	orrs	r3, r2
 800411e:	600b      	str	r3, [r1, #0]
 8004120:	e015      	b.n	800414e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004122:	4b26      	ldr	r3, [pc, #152]	@ (80041bc <HAL_RCC_OscConfig+0x270>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004128:	f7fe fd1c 	bl	8002b64 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004130:	f7fe fd18 	bl	8002b64 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e180      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004142:	4b1d      	ldr	r3, [pc, #116]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d03a      	beq.n	80041d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d019      	beq.n	8004196 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004162:	4b17      	ldr	r3, [pc, #92]	@ (80041c0 <HAL_RCC_OscConfig+0x274>)
 8004164:	2201      	movs	r2, #1
 8004166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004168:	f7fe fcfc 	bl	8002b64 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004170:	f7fe fcf8 	bl	8002b64 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e160      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004182:	4b0d      	ldr	r3, [pc, #52]	@ (80041b8 <HAL_RCC_OscConfig+0x26c>)
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800418e:	2001      	movs	r0, #1
 8004190:	f000 face 	bl	8004730 <RCC_Delay>
 8004194:	e01c      	b.n	80041d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004196:	4b0a      	ldr	r3, [pc, #40]	@ (80041c0 <HAL_RCC_OscConfig+0x274>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800419c:	f7fe fce2 	bl	8002b64 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a2:	e00f      	b.n	80041c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a4:	f7fe fcde 	bl	8002b64 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d908      	bls.n	80041c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e146      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
 80041b6:	bf00      	nop
 80041b8:	40021000 	.word	0x40021000
 80041bc:	42420000 	.word	0x42420000
 80041c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c4:	4b92      	ldr	r3, [pc, #584]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e9      	bne.n	80041a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80a6 	beq.w	800432a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041de:	2300      	movs	r3, #0
 80041e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e2:	4b8b      	ldr	r3, [pc, #556]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10d      	bne.n	800420a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ee:	4b88      	ldr	r3, [pc, #544]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	4a87      	ldr	r2, [pc, #540]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 80041f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f8:	61d3      	str	r3, [r2, #28]
 80041fa:	4b85      	ldr	r3, [pc, #532]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420a:	4b82      	ldr	r3, [pc, #520]	@ (8004414 <HAL_RCC_OscConfig+0x4c8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d118      	bne.n	8004248 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004216:	4b7f      	ldr	r3, [pc, #508]	@ (8004414 <HAL_RCC_OscConfig+0x4c8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a7e      	ldr	r2, [pc, #504]	@ (8004414 <HAL_RCC_OscConfig+0x4c8>)
 800421c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004222:	f7fe fc9f 	bl	8002b64 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422a:	f7fe fc9b 	bl	8002b64 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b64      	cmp	r3, #100	@ 0x64
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e103      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423c:	4b75      	ldr	r3, [pc, #468]	@ (8004414 <HAL_RCC_OscConfig+0x4c8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d106      	bne.n	800425e <HAL_RCC_OscConfig+0x312>
 8004250:	4b6f      	ldr	r3, [pc, #444]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	4a6e      	ldr	r2, [pc, #440]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	6213      	str	r3, [r2, #32]
 800425c:	e02d      	b.n	80042ba <HAL_RCC_OscConfig+0x36e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10c      	bne.n	8004280 <HAL_RCC_OscConfig+0x334>
 8004266:	4b6a      	ldr	r3, [pc, #424]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	4a69      	ldr	r2, [pc, #420]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	6213      	str	r3, [r2, #32]
 8004272:	4b67      	ldr	r3, [pc, #412]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	4a66      	ldr	r2, [pc, #408]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 8004278:	f023 0304 	bic.w	r3, r3, #4
 800427c:	6213      	str	r3, [r2, #32]
 800427e:	e01c      	b.n	80042ba <HAL_RCC_OscConfig+0x36e>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2b05      	cmp	r3, #5
 8004286:	d10c      	bne.n	80042a2 <HAL_RCC_OscConfig+0x356>
 8004288:	4b61      	ldr	r3, [pc, #388]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	4a60      	ldr	r2, [pc, #384]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 800428e:	f043 0304 	orr.w	r3, r3, #4
 8004292:	6213      	str	r3, [r2, #32]
 8004294:	4b5e      	ldr	r3, [pc, #376]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	4a5d      	ldr	r2, [pc, #372]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6213      	str	r3, [r2, #32]
 80042a0:	e00b      	b.n	80042ba <HAL_RCC_OscConfig+0x36e>
 80042a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	4a5a      	ldr	r2, [pc, #360]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	6213      	str	r3, [r2, #32]
 80042ae:	4b58      	ldr	r3, [pc, #352]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	4a57      	ldr	r2, [pc, #348]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 80042b4:	f023 0304 	bic.w	r3, r3, #4
 80042b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d015      	beq.n	80042ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c2:	f7fe fc4f 	bl	8002b64 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c8:	e00a      	b.n	80042e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ca:	f7fe fc4b 	bl	8002b64 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d8:	4293      	cmp	r3, r2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e0b1      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0ee      	beq.n	80042ca <HAL_RCC_OscConfig+0x37e>
 80042ec:	e014      	b.n	8004318 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ee:	f7fe fc39 	bl	8002b64 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f4:	e00a      	b.n	800430c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f6:	f7fe fc35 	bl	8002b64 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004304:	4293      	cmp	r3, r2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e09b      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430c:	4b40      	ldr	r3, [pc, #256]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ee      	bne.n	80042f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d105      	bne.n	800432a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431e:	4b3c      	ldr	r3, [pc, #240]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	4a3b      	ldr	r2, [pc, #236]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 8004324:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004328:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8087 	beq.w	8004442 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004334:	4b36      	ldr	r3, [pc, #216]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 030c 	and.w	r3, r3, #12
 800433c:	2b08      	cmp	r3, #8
 800433e:	d061      	beq.n	8004404 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d146      	bne.n	80043d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004348:	4b33      	ldr	r3, [pc, #204]	@ (8004418 <HAL_RCC_OscConfig+0x4cc>)
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434e:	f7fe fc09 	bl	8002b64 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004356:	f7fe fc05 	bl	8002b64 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e06d      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004368:	4b29      	ldr	r3, [pc, #164]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1f0      	bne.n	8004356 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800437c:	d108      	bne.n	8004390 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800437e:	4b24      	ldr	r3, [pc, #144]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	4921      	ldr	r1, [pc, #132]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 800438c:	4313      	orrs	r3, r2
 800438e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004390:	4b1f      	ldr	r3, [pc, #124]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a19      	ldr	r1, [r3, #32]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	430b      	orrs	r3, r1
 80043a2:	491b      	ldr	r1, [pc, #108]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004418 <HAL_RCC_OscConfig+0x4cc>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ae:	f7fe fbd9 	bl	8002b64 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b6:	f7fe fbd5 	bl	8002b64 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e03d      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043c8:	4b11      	ldr	r3, [pc, #68]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x46a>
 80043d4:	e035      	b.n	8004442 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d6:	4b10      	ldr	r3, [pc, #64]	@ (8004418 <HAL_RCC_OscConfig+0x4cc>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fe fbc2 	bl	8002b64 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fe fbbe 	bl	8002b64 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e026      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043f6:	4b06      	ldr	r3, [pc, #24]	@ (8004410 <HAL_RCC_OscConfig+0x4c4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x498>
 8004402:	e01e      	b.n	8004442 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d107      	bne.n	800441c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e019      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
 8004410:	40021000 	.word	0x40021000
 8004414:	40007000 	.word	0x40007000
 8004418:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800441c:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <HAL_RCC_OscConfig+0x500>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	429a      	cmp	r2, r3
 800442e:	d106      	bne.n	800443e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443a:	429a      	cmp	r2, r3
 800443c:	d001      	beq.n	8004442 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40021000 	.word	0x40021000

08004450 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0d0      	b.n	8004606 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004464:	4b6a      	ldr	r3, [pc, #424]	@ (8004610 <HAL_RCC_ClockConfig+0x1c0>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d910      	bls.n	8004494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004472:	4b67      	ldr	r3, [pc, #412]	@ (8004610 <HAL_RCC_ClockConfig+0x1c0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 0207 	bic.w	r2, r3, #7
 800447a:	4965      	ldr	r1, [pc, #404]	@ (8004610 <HAL_RCC_ClockConfig+0x1c0>)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	4313      	orrs	r3, r2
 8004480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004482:	4b63      	ldr	r3, [pc, #396]	@ (8004610 <HAL_RCC_ClockConfig+0x1c0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d001      	beq.n	8004494 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e0b8      	b.n	8004606 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d020      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044ac:	4b59      	ldr	r3, [pc, #356]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	4a58      	ldr	r2, [pc, #352]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 80044b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c4:	4b53      	ldr	r3, [pc, #332]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	4a52      	ldr	r2, [pc, #328]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 80044ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80044ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d0:	4b50      	ldr	r3, [pc, #320]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	494d      	ldr	r1, [pc, #308]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d040      	beq.n	8004570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d107      	bne.n	8004506 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f6:	4b47      	ldr	r3, [pc, #284]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d115      	bne.n	800452e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e07f      	b.n	8004606 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d107      	bne.n	800451e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450e:	4b41      	ldr	r3, [pc, #260]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e073      	b.n	8004606 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451e:	4b3d      	ldr	r3, [pc, #244]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e06b      	b.n	8004606 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800452e:	4b39      	ldr	r3, [pc, #228]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f023 0203 	bic.w	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	4936      	ldr	r1, [pc, #216]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 800453c:	4313      	orrs	r3, r2
 800453e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004540:	f7fe fb10 	bl	8002b64 <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004546:	e00a      	b.n	800455e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004548:	f7fe fb0c 	bl	8002b64 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e053      	b.n	8004606 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455e:	4b2d      	ldr	r3, [pc, #180]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f003 020c 	and.w	r2, r3, #12
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	429a      	cmp	r2, r3
 800456e:	d1eb      	bne.n	8004548 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004570:	4b27      	ldr	r3, [pc, #156]	@ (8004610 <HAL_RCC_ClockConfig+0x1c0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d210      	bcs.n	80045a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b24      	ldr	r3, [pc, #144]	@ (8004610 <HAL_RCC_ClockConfig+0x1c0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 0207 	bic.w	r2, r3, #7
 8004586:	4922      	ldr	r1, [pc, #136]	@ (8004610 <HAL_RCC_ClockConfig+0x1c0>)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	4313      	orrs	r3, r2
 800458c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	4b20      	ldr	r3, [pc, #128]	@ (8004610 <HAL_RCC_ClockConfig+0x1c0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e032      	b.n	8004606 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ac:	4b19      	ldr	r3, [pc, #100]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4916      	ldr	r1, [pc, #88]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045ca:	4b12      	ldr	r3, [pc, #72]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	490e      	ldr	r1, [pc, #56]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045de:	f000 f821 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80045e2:	4602      	mov	r2, r0
 80045e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004614 <HAL_RCC_ClockConfig+0x1c4>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	490a      	ldr	r1, [pc, #40]	@ (8004618 <HAL_RCC_ClockConfig+0x1c8>)
 80045f0:	5ccb      	ldrb	r3, [r1, r3]
 80045f2:	fa22 f303 	lsr.w	r3, r2, r3
 80045f6:	4a09      	ldr	r2, [pc, #36]	@ (800461c <HAL_RCC_ClockConfig+0x1cc>)
 80045f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045fa:	4b09      	ldr	r3, [pc, #36]	@ (8004620 <HAL_RCC_ClockConfig+0x1d0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fa6e 	bl	8002ae0 <HAL_InitTick>

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40022000 	.word	0x40022000
 8004614:	40021000 	.word	0x40021000
 8004618:	08006e70 	.word	0x08006e70
 800461c:	20000054 	.word	0x20000054
 8004620:	20000058 	.word	0x20000058

08004624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	2300      	movs	r3, #0
 8004638:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800463e:	4b1e      	ldr	r3, [pc, #120]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b04      	cmp	r3, #4
 800464c:	d002      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x30>
 800464e:	2b08      	cmp	r3, #8
 8004650:	d003      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0x36>
 8004652:	e027      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004654:	4b19      	ldr	r3, [pc, #100]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x98>)
 8004656:	613b      	str	r3, [r7, #16]
      break;
 8004658:	e027      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	0c9b      	lsrs	r3, r3, #18
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	4a17      	ldr	r2, [pc, #92]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004664:	5cd3      	ldrb	r3, [r2, r3]
 8004666:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d010      	beq.n	8004694 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004672:	4b11      	ldr	r3, [pc, #68]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	0c5b      	lsrs	r3, r3, #17
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	4a11      	ldr	r2, [pc, #68]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800467e:	5cd3      	ldrb	r3, [r2, r3]
 8004680:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a0d      	ldr	r2, [pc, #52]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x98>)
 8004686:	fb03 f202 	mul.w	r2, r3, r2
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	e004      	b.n	800469e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a0c      	ldr	r2, [pc, #48]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004698:	fb02 f303 	mul.w	r3, r2, r3
 800469c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	613b      	str	r3, [r7, #16]
      break;
 80046a2:	e002      	b.n	80046aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046a4:	4b05      	ldr	r3, [pc, #20]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x98>)
 80046a6:	613b      	str	r3, [r7, #16]
      break;
 80046a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046aa:	693b      	ldr	r3, [r7, #16]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40021000 	.word	0x40021000
 80046bc:	007a1200 	.word	0x007a1200
 80046c0:	08006e88 	.word	0x08006e88
 80046c4:	08006e98 	.word	0x08006e98
 80046c8:	003d0900 	.word	0x003d0900

080046cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d0:	4b02      	ldr	r3, [pc, #8]	@ (80046dc <HAL_RCC_GetHCLKFreq+0x10>)
 80046d2:	681b      	ldr	r3, [r3, #0]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr
 80046dc:	20000054 	.word	0x20000054

080046e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046e4:	f7ff fff2 	bl	80046cc <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4903      	ldr	r1, [pc, #12]	@ (8004704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40021000 	.word	0x40021000
 8004704:	08006e80 	.word	0x08006e80

08004708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800470c:	f7ff ffde 	bl	80046cc <HAL_RCC_GetHCLKFreq>
 8004710:	4602      	mov	r2, r0
 8004712:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	0adb      	lsrs	r3, r3, #11
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	4903      	ldr	r1, [pc, #12]	@ (800472c <HAL_RCC_GetPCLK2Freq+0x24>)
 800471e:	5ccb      	ldrb	r3, [r1, r3]
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004724:	4618      	mov	r0, r3
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40021000 	.word	0x40021000
 800472c:	08006e80 	.word	0x08006e80

08004730 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004738:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <RCC_Delay+0x34>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a0a      	ldr	r2, [pc, #40]	@ (8004768 <RCC_Delay+0x38>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	0a5b      	lsrs	r3, r3, #9
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	fb02 f303 	mul.w	r3, r2, r3
 800474a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800474c:	bf00      	nop
  }
  while (Delay --);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1e5a      	subs	r2, r3, #1
 8004752:	60fa      	str	r2, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1f9      	bne.n	800474c <RCC_Delay+0x1c>
}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr
 8004764:	20000054 	.word	0x20000054
 8004768:	10624dd3 	.word	0x10624dd3

0800476c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d07d      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004788:	2300      	movs	r3, #0
 800478a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800478c:	4b4f      	ldr	r3, [pc, #316]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10d      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004798:	4b4c      	ldr	r3, [pc, #304]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	4a4b      	ldr	r2, [pc, #300]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800479e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047a2:	61d3      	str	r3, [r2, #28]
 80047a4:	4b49      	ldr	r3, [pc, #292]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047b0:	2301      	movs	r3, #1
 80047b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b4:	4b46      	ldr	r3, [pc, #280]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d118      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047c0:	4b43      	ldr	r3, [pc, #268]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a42      	ldr	r2, [pc, #264]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047cc:	f7fe f9ca 	bl	8002b64 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d2:	e008      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d4:	f7fe f9c6 	bl	8002b64 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b64      	cmp	r3, #100	@ 0x64
 80047e0:	d901      	bls.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e06d      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e6:	4b3a      	ldr	r3, [pc, #232]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047f2:	4b36      	ldr	r3, [pc, #216]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d02e      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	429a      	cmp	r2, r3
 800480e:	d027      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004810:	4b2e      	ldr	r3, [pc, #184]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004818:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800481a:	4b2e      	ldr	r3, [pc, #184]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800481c:	2201      	movs	r2, #1
 800481e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004820:	4b2c      	ldr	r3, [pc, #176]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004826:	4a29      	ldr	r2, [pc, #164]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d014      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004836:	f7fe f995 	bl	8002b64 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483c:	e00a      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483e:	f7fe f991 	bl	8002b64 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484c:	4293      	cmp	r3, r2
 800484e:	d901      	bls.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e036      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004854:	4b1d      	ldr	r3, [pc, #116]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ee      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004860:	4b1a      	ldr	r3, [pc, #104]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	4917      	ldr	r1, [pc, #92]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486e:	4313      	orrs	r3, r2
 8004870:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d105      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004878:	4b14      	ldr	r3, [pc, #80]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	4a13      	ldr	r2, [pc, #76]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004882:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004890:	4b0e      	ldr	r3, [pc, #56]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	490b      	ldr	r1, [pc, #44]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0310 	and.w	r3, r3, #16
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d008      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048ae:	4b07      	ldr	r3, [pc, #28]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	4904      	ldr	r1, [pc, #16]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40007000 	.word	0x40007000
 80048d4:	42420440 	.word	0x42420440

080048d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	2300      	movs	r3, #0
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	2300      	movs	r3, #0
 80048ea:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	2300      	movs	r3, #0
 80048f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b10      	cmp	r3, #16
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b10      	cmp	r3, #16
 80048fe:	f200 808a 	bhi.w	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d045      	beq.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d075      	beq.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800490e:	e082      	b.n	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004910:	4b46      	ldr	r3, [pc, #280]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004916:	4b45      	ldr	r3, [pc, #276]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d07b      	beq.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	0c9b      	lsrs	r3, r3, #18
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	4a41      	ldr	r2, [pc, #260]	@ (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800492c:	5cd3      	ldrb	r3, [r2, r3]
 800492e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d015      	beq.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800493a:	4b3c      	ldr	r3, [pc, #240]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	0c5b      	lsrs	r3, r3, #17
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	4a3b      	ldr	r2, [pc, #236]	@ (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004954:	4a38      	ldr	r2, [pc, #224]	@ (8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	fbb2 f2f3 	udiv	r2, r2, r3
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	61fb      	str	r3, [r7, #28]
 8004964:	e004      	b.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4a34      	ldr	r2, [pc, #208]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004970:	4b2e      	ldr	r3, [pc, #184]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004978:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800497c:	d102      	bne.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	61bb      	str	r3, [r7, #24]
      break;
 8004982:	e04a      	b.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	4a2d      	ldr	r2, [pc, #180]	@ (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800498a:	fba2 2303 	umull	r2, r3, r2, r3
 800498e:	085b      	lsrs	r3, r3, #1
 8004990:	61bb      	str	r3, [r7, #24]
      break;
 8004992:	e042      	b.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004994:	4b25      	ldr	r3, [pc, #148]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049a4:	d108      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80049b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	e01f      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049c2:	d109      	bne.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80049c4:	4b19      	ldr	r3, [pc, #100]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80049d0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	e00f      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049e2:	d11c      	bne.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80049e4:	4b11      	ldr	r3, [pc, #68]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d016      	beq.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80049f0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80049f4:	61bb      	str	r3, [r7, #24]
      break;
 80049f6:	e012      	b.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80049f8:	e011      	b.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80049fa:	f7ff fe85 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 80049fe:	4602      	mov	r2, r0
 8004a00:	4b0a      	ldr	r3, [pc, #40]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	0b9b      	lsrs	r3, r3, #14
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a12:	61bb      	str	r3, [r7, #24]
      break;
 8004a14:	e004      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004a16:	bf00      	nop
 8004a18:	e002      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004a1a:	bf00      	nop
 8004a1c:	e000      	b.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004a1e:	bf00      	nop
    }
  }
  return (frequency);
 8004a20:	69bb      	ldr	r3, [r7, #24]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3720      	adds	r7, #32
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	08006e9c 	.word	0x08006e9c
 8004a34:	08006eac 	.word	0x08006eac
 8004a38:	007a1200 	.word	0x007a1200
 8004a3c:	003d0900 	.word	0x003d0900
 8004a40:	aaaaaaab 	.word	0xaaaaaaab

08004a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e041      	b.n	8004ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fd fd92 	bl	8002594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f000 ff42 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d001      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e03a      	b.n	8004b72 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a18      	ldr	r2, [pc, #96]	@ (8004b7c <HAL_TIM_Base_Start_IT+0x98>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00e      	beq.n	8004b3c <HAL_TIM_Base_Start_IT+0x58>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b26:	d009      	beq.n	8004b3c <HAL_TIM_Base_Start_IT+0x58>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a14      	ldr	r2, [pc, #80]	@ (8004b80 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_TIM_Base_Start_IT+0x58>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a13      	ldr	r2, [pc, #76]	@ (8004b84 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d111      	bne.n	8004b60 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b06      	cmp	r3, #6
 8004b4c:	d010      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0201 	orr.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5e:	e007      	b.n	8004b70 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr
 8004b7c:	40012c00 	.word	0x40012c00
 8004b80:	40000400 	.word	0x40000400
 8004b84:	40000800 	.word	0x40000800

08004b88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e041      	b.n	8004c1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f839 	bl	8004c26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f000 fea0 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d109      	bne.n	8004c64 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e022      	b.n	8004caa <HAL_TIM_PWM_Start_DMA+0x72>
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d109      	bne.n	8004c7e <HAL_TIM_PWM_Start_DMA+0x46>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	bf0c      	ite	eq
 8004c76:	2301      	moveq	r3, #1
 8004c78:	2300      	movne	r3, #0
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	e015      	b.n	8004caa <HAL_TIM_PWM_Start_DMA+0x72>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d109      	bne.n	8004c98 <HAL_TIM_PWM_Start_DMA+0x60>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	bf0c      	ite	eq
 8004c90:	2301      	moveq	r3, #1
 8004c92:	2300      	movne	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	e008      	b.n	8004caa <HAL_TIM_PWM_Start_DMA+0x72>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e153      	b.n	8004f5a <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d109      	bne.n	8004ccc <HAL_TIM_PWM_Start_DMA+0x94>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e022      	b.n	8004d12 <HAL_TIM_PWM_Start_DMA+0xda>
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d109      	bne.n	8004ce6 <HAL_TIM_PWM_Start_DMA+0xae>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	bf0c      	ite	eq
 8004cde:	2301      	moveq	r3, #1
 8004ce0:	2300      	movne	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	e015      	b.n	8004d12 <HAL_TIM_PWM_Start_DMA+0xda>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d109      	bne.n	8004d00 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	bf0c      	ite	eq
 8004cf8:	2301      	moveq	r3, #1
 8004cfa:	2300      	movne	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	e008      	b.n	8004d12 <HAL_TIM_PWM_Start_DMA+0xda>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d024      	beq.n	8004d60 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <HAL_TIM_PWM_Start_DMA+0xea>
 8004d1c:	887b      	ldrh	r3, [r7, #2]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e119      	b.n	8004f5a <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d104      	bne.n	8004d36 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d34:	e016      	b.n	8004d64 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d104      	bne.n	8004d46 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d44:	e00e      	b.n	8004d64 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d104      	bne.n	8004d56 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d54:	e006      	b.n	8004d64 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d5e:	e001      	b.n	8004d64 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e0fa      	b.n	8004f5a <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b0c      	cmp	r3, #12
 8004d68:	f200 80ae 	bhi.w	8004ec8 <HAL_TIM_PWM_Start_DMA+0x290>
 8004d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d72:	bf00      	nop
 8004d74:	08004da9 	.word	0x08004da9
 8004d78:	08004ec9 	.word	0x08004ec9
 8004d7c:	08004ec9 	.word	0x08004ec9
 8004d80:	08004ec9 	.word	0x08004ec9
 8004d84:	08004df1 	.word	0x08004df1
 8004d88:	08004ec9 	.word	0x08004ec9
 8004d8c:	08004ec9 	.word	0x08004ec9
 8004d90:	08004ec9 	.word	0x08004ec9
 8004d94:	08004e39 	.word	0x08004e39
 8004d98:	08004ec9 	.word	0x08004ec9
 8004d9c:	08004ec9 	.word	0x08004ec9
 8004da0:	08004ec9 	.word	0x08004ec9
 8004da4:	08004e81 	.word	0x08004e81
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	4a6d      	ldr	r2, [pc, #436]	@ (8004f64 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004dae:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	4a6c      	ldr	r2, [pc, #432]	@ (8004f68 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004db6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	4a6b      	ldr	r2, [pc, #428]	@ (8004f6c <HAL_TIM_PWM_Start_DMA+0x334>)
 8004dbe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3334      	adds	r3, #52	@ 0x34
 8004dcc:	461a      	mov	r2, r3
 8004dce:	887b      	ldrh	r3, [r7, #2]
 8004dd0:	f7fe fcd8 	bl	8003784 <HAL_DMA_Start_IT>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e0bd      	b.n	8004f5a <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dec:	60da      	str	r2, [r3, #12]
      break;
 8004dee:	e06e      	b.n	8004ece <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df4:	4a5b      	ldr	r2, [pc, #364]	@ (8004f64 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004df6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfc:	4a5a      	ldr	r2, [pc, #360]	@ (8004f68 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e04:	4a59      	ldr	r2, [pc, #356]	@ (8004f6c <HAL_TIM_PWM_Start_DMA+0x334>)
 8004e06:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3338      	adds	r3, #56	@ 0x38
 8004e14:	461a      	mov	r2, r3
 8004e16:	887b      	ldrh	r3, [r7, #2]
 8004e18:	f7fe fcb4 	bl	8003784 <HAL_DMA_Start_IT>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e099      	b.n	8004f5a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e34:	60da      	str	r2, [r3, #12]
      break;
 8004e36:	e04a      	b.n	8004ece <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3c:	4a49      	ldr	r2, [pc, #292]	@ (8004f64 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004e3e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e44:	4a48      	ldr	r2, [pc, #288]	@ (8004f68 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004e46:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4c:	4a47      	ldr	r2, [pc, #284]	@ (8004f6c <HAL_TIM_PWM_Start_DMA+0x334>)
 8004e4e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	333c      	adds	r3, #60	@ 0x3c
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	887b      	ldrh	r3, [r7, #2]
 8004e60:	f7fe fc90 	bl	8003784 <HAL_DMA_Start_IT>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e075      	b.n	8004f5a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e7c:	60da      	str	r2, [r3, #12]
      break;
 8004e7e:	e026      	b.n	8004ece <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e84:	4a37      	ldr	r2, [pc, #220]	@ (8004f64 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004e86:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8c:	4a36      	ldr	r2, [pc, #216]	@ (8004f68 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004e8e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e94:	4a35      	ldr	r2, [pc, #212]	@ (8004f6c <HAL_TIM_PWM_Start_DMA+0x334>)
 8004e96:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3340      	adds	r3, #64	@ 0x40
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	887b      	ldrh	r3, [r7, #2]
 8004ea8:	f7fe fc6c 	bl	8003784 <HAL_DMA_Start_IT>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e051      	b.n	8004f5a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ec4:	60da      	str	r2, [r3, #12]
      break;
 8004ec6:	e002      	b.n	8004ece <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	75fb      	strb	r3, [r7, #23]
      break;
 8004ecc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ece:	7dfb      	ldrb	r3, [r7, #23]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d141      	bne.n	8004f58 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 ff95 	bl	8005e0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a22      	ldr	r2, [pc, #136]	@ (8004f70 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d107      	bne.n	8004efc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004efa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a1b      	ldr	r2, [pc, #108]	@ (8004f70 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00e      	beq.n	8004f24 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f0e:	d009      	beq.n	8004f24 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a17      	ldr	r2, [pc, #92]	@ (8004f74 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a16      	ldr	r2, [pc, #88]	@ (8004f78 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d111      	bne.n	8004f48 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b06      	cmp	r3, #6
 8004f34:	d010      	beq.n	8004f58 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0201 	orr.w	r2, r2, #1
 8004f44:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f46:	e007      	b.n	8004f58 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	080057fd 	.word	0x080057fd
 8004f68:	080058a5 	.word	0x080058a5
 8004f6c:	0800576b 	.word	0x0800576b
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40000400 	.word	0x40000400
 8004f78:	40000800 	.word	0x40000800

08004f7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e093      	b.n	80050b8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d106      	bne.n	8004faa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7fd fbcb 	bl	8002740 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2202      	movs	r2, #2
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fc0:	f023 0307 	bic.w	r3, r3, #7
 8004fc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	f000 fc9b 	bl	800590c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ffe:	f023 0303 	bic.w	r3, r3, #3
 8005002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	4313      	orrs	r3, r2
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800501c:	f023 030c 	bic.w	r3, r3, #12
 8005020:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005028:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800502c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	4313      	orrs	r3, r2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	011a      	lsls	r2, r3, #4
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	031b      	lsls	r3, r3, #12
 800504c:	4313      	orrs	r3, r2
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800505a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	4313      	orrs	r3, r2
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80050e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d110      	bne.n	8005112 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d102      	bne.n	80050fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050f6:	7b7b      	ldrb	r3, [r7, #13]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d001      	beq.n	8005100 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e069      	b.n	80051d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005110:	e031      	b.n	8005176 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b04      	cmp	r3, #4
 8005116:	d110      	bne.n	800513a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005118:	7bbb      	ldrb	r3, [r7, #14]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d102      	bne.n	8005124 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800511e:	7b3b      	ldrb	r3, [r7, #12]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d001      	beq.n	8005128 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e055      	b.n	80051d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005138:	e01d      	b.n	8005176 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d108      	bne.n	8005152 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005140:	7bbb      	ldrb	r3, [r7, #14]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d105      	bne.n	8005152 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005146:	7b7b      	ldrb	r3, [r7, #13]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d102      	bne.n	8005152 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800514c:	7b3b      	ldrb	r3, [r7, #12]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d001      	beq.n	8005156 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e03e      	b.n	80051d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2202      	movs	r2, #2
 8005162:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_TIM_Encoder_Start+0xc4>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b04      	cmp	r3, #4
 8005180:	d008      	beq.n	8005194 <HAL_TIM_Encoder_Start+0xd4>
 8005182:	e00f      	b.n	80051a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2201      	movs	r2, #1
 800518a:	2100      	movs	r1, #0
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fe3d 	bl	8005e0c <TIM_CCxChannelCmd>
      break;
 8005192:	e016      	b.n	80051c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2201      	movs	r2, #1
 800519a:	2104      	movs	r1, #4
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fe35 	bl	8005e0c <TIM_CCxChannelCmd>
      break;
 80051a2:	e00e      	b.n	80051c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2201      	movs	r2, #1
 80051aa:	2100      	movs	r1, #0
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fe2d 	bl	8005e0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2201      	movs	r2, #1
 80051b8:	2104      	movs	r1, #4
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fe26 	bl	8005e0c <TIM_CCxChannelCmd>
      break;
 80051c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d122      	bne.n	8005238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d11b      	bne.n	8005238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0202 	mvn.w	r2, #2
 8005208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fa76 	bl	8005710 <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fa69 	bl	80056fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fa78 	bl	8005722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b04      	cmp	r3, #4
 8005244:	d122      	bne.n	800528c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b04      	cmp	r3, #4
 8005252:	d11b      	bne.n	800528c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0204 	mvn.w	r2, #4
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fa4c 	bl	8005710 <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fa3f 	bl	80056fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fa4e 	bl	8005722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b08      	cmp	r3, #8
 8005298:	d122      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d11b      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0208 	mvn.w	r2, #8
 80052b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2204      	movs	r2, #4
 80052b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fa22 	bl	8005710 <HAL_TIM_IC_CaptureCallback>
 80052cc:	e005      	b.n	80052da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fa15 	bl	80056fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fa24 	bl	8005722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b10      	cmp	r3, #16
 80052ec:	d122      	bne.n	8005334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b10      	cmp	r3, #16
 80052fa:	d11b      	bne.n	8005334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0210 	mvn.w	r2, #16
 8005304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2208      	movs	r2, #8
 800530a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f9f8 	bl	8005710 <HAL_TIM_IC_CaptureCallback>
 8005320:	e005      	b.n	800532e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f9eb 	bl	80056fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f9fa 	bl	8005722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b01      	cmp	r3, #1
 8005340:	d10e      	bne.n	8005360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b01      	cmp	r3, #1
 800534e:	d107      	bne.n	8005360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0201 	mvn.w	r2, #1
 8005358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fb ff4a 	bl	80011f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800536a:	2b80      	cmp	r3, #128	@ 0x80
 800536c:	d10e      	bne.n	800538c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005378:	2b80      	cmp	r3, #128	@ 0x80
 800537a:	d107      	bne.n	800538c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fe1c 	bl	8005fc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005396:	2b40      	cmp	r3, #64	@ 0x40
 8005398:	d10e      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a4:	2b40      	cmp	r3, #64	@ 0x40
 80053a6:	d107      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f9c7 	bl	8005746 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d10e      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	d107      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0220 	mvn.w	r2, #32
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fde7 	bl	8005fb2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e4:	bf00      	nop
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005406:	2302      	movs	r3, #2
 8005408:	e0ae      	b.n	8005568 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b0c      	cmp	r3, #12
 8005416:	f200 809f 	bhi.w	8005558 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800541a:	a201      	add	r2, pc, #4	@ (adr r2, 8005420 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005455 	.word	0x08005455
 8005424:	08005559 	.word	0x08005559
 8005428:	08005559 	.word	0x08005559
 800542c:	08005559 	.word	0x08005559
 8005430:	08005495 	.word	0x08005495
 8005434:	08005559 	.word	0x08005559
 8005438:	08005559 	.word	0x08005559
 800543c:	08005559 	.word	0x08005559
 8005440:	080054d7 	.word	0x080054d7
 8005444:	08005559 	.word	0x08005559
 8005448:	08005559 	.word	0x08005559
 800544c:	08005559 	.word	0x08005559
 8005450:	08005517 	.word	0x08005517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fab8 	bl	80059d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0208 	orr.w	r2, r2, #8
 800546e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0204 	bic.w	r2, r2, #4
 800547e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6999      	ldr	r1, [r3, #24]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	619a      	str	r2, [r3, #24]
      break;
 8005492:	e064      	b.n	800555e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fafe 	bl	8005a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6999      	ldr	r1, [r3, #24]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	021a      	lsls	r2, r3, #8
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	619a      	str	r2, [r3, #24]
      break;
 80054d4:	e043      	b.n	800555e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fb47 	bl	8005b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0208 	orr.w	r2, r2, #8
 80054f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0204 	bic.w	r2, r2, #4
 8005500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69d9      	ldr	r1, [r3, #28]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	61da      	str	r2, [r3, #28]
      break;
 8005514:	e023      	b.n	800555e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fb91 	bl	8005c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69d9      	ldr	r1, [r3, #28]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	021a      	lsls	r2, r3, #8
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	61da      	str	r2, [r3, #28]
      break;
 8005556:	e002      	b.n	800555e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	75fb      	strb	r3, [r7, #23]
      break;
 800555c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005566:	7dfb      	ldrb	r3, [r7, #23]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_TIM_ConfigClockSource+0x1c>
 8005588:	2302      	movs	r3, #2
 800558a:	e0b4      	b.n	80056f6 <HAL_TIM_ConfigClockSource+0x186>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055c4:	d03e      	beq.n	8005644 <HAL_TIM_ConfigClockSource+0xd4>
 80055c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055ca:	f200 8087 	bhi.w	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d2:	f000 8086 	beq.w	80056e2 <HAL_TIM_ConfigClockSource+0x172>
 80055d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055da:	d87f      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055dc:	2b70      	cmp	r3, #112	@ 0x70
 80055de:	d01a      	beq.n	8005616 <HAL_TIM_ConfigClockSource+0xa6>
 80055e0:	2b70      	cmp	r3, #112	@ 0x70
 80055e2:	d87b      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055e4:	2b60      	cmp	r3, #96	@ 0x60
 80055e6:	d050      	beq.n	800568a <HAL_TIM_ConfigClockSource+0x11a>
 80055e8:	2b60      	cmp	r3, #96	@ 0x60
 80055ea:	d877      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055ec:	2b50      	cmp	r3, #80	@ 0x50
 80055ee:	d03c      	beq.n	800566a <HAL_TIM_ConfigClockSource+0xfa>
 80055f0:	2b50      	cmp	r3, #80	@ 0x50
 80055f2:	d873      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055f4:	2b40      	cmp	r3, #64	@ 0x40
 80055f6:	d058      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x13a>
 80055f8:	2b40      	cmp	r3, #64	@ 0x40
 80055fa:	d86f      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055fc:	2b30      	cmp	r3, #48	@ 0x30
 80055fe:	d064      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005600:	2b30      	cmp	r3, #48	@ 0x30
 8005602:	d86b      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 8005604:	2b20      	cmp	r3, #32
 8005606:	d060      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005608:	2b20      	cmp	r3, #32
 800560a:	d867      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d05c      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005610:	2b10      	cmp	r3, #16
 8005612:	d05a      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005614:	e062      	b.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005626:	f000 fbd2 	bl	8005dce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	609a      	str	r2, [r3, #8]
      break;
 8005642:	e04f      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005654:	f000 fbbb 	bl	8005dce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005666:	609a      	str	r2, [r3, #8]
      break;
 8005668:	e03c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005676:	461a      	mov	r2, r3
 8005678:	f000 fb32 	bl	8005ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2150      	movs	r1, #80	@ 0x50
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fb89 	bl	8005d9a <TIM_ITRx_SetConfig>
      break;
 8005688:	e02c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005696:	461a      	mov	r2, r3
 8005698:	f000 fb50 	bl	8005d3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2160      	movs	r1, #96	@ 0x60
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fb79 	bl	8005d9a <TIM_ITRx_SetConfig>
      break;
 80056a8:	e01c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b6:	461a      	mov	r2, r3
 80056b8:	f000 fb12 	bl	8005ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2140      	movs	r1, #64	@ 0x40
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fb69 	bl	8005d9a <TIM_ITRx_SetConfig>
      break;
 80056c8:	e00c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4619      	mov	r1, r3
 80056d4:	4610      	mov	r0, r2
 80056d6:	f000 fb60 	bl	8005d9a <TIM_ITRx_SetConfig>
      break;
 80056da:	e003      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
      break;
 80056e0:	e000      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr

08005710 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	bc80      	pop	{r7}
 8005720:	4770      	bx	lr

08005722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr

08005734 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr

08005746 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr

08005758 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr

0800576a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	429a      	cmp	r2, r3
 8005780:	d107      	bne.n	8005792 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005790:	e02a      	b.n	80057e8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	d107      	bne.n	80057ac <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2202      	movs	r2, #2
 80057a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057aa:	e01d      	b.n	80057e8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d107      	bne.n	80057c6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2204      	movs	r2, #4
 80057ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057c4:	e010      	b.n	80057e8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d107      	bne.n	80057e0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2208      	movs	r2, #8
 80057d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057de:	e003      	b.n	80057e8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f7ff ffb5 	bl	8005758 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	771a      	strb	r2, [r3, #28]
}
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	d10b      	bne.n	800582c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d136      	bne.n	8005890 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800582a:	e031      	b.n	8005890 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	d10b      	bne.n	800584e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2202      	movs	r2, #2
 800583a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d125      	bne.n	8005890 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800584c:	e020      	b.n	8005890 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	429a      	cmp	r2, r3
 8005856:	d10b      	bne.n	8005870 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2204      	movs	r2, #4
 800585c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d114      	bne.n	8005890 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800586e:	e00f      	b.n	8005890 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	429a      	cmp	r2, r3
 8005878:	d10a      	bne.n	8005890 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2208      	movs	r2, #8
 800587e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d103      	bne.n	8005890 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f7ff ff46 	bl	8005722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	771a      	strb	r2, [r3, #28]
}
 800589c:	bf00      	nop
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d103      	bne.n	80058c4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	771a      	strb	r2, [r3, #28]
 80058c2:	e019      	b.n	80058f8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d103      	bne.n	80058d6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2202      	movs	r2, #2
 80058d2:	771a      	strb	r2, [r3, #28]
 80058d4:	e010      	b.n	80058f8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d103      	bne.n	80058e8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2204      	movs	r2, #4
 80058e4:	771a      	strb	r2, [r3, #28]
 80058e6:	e007      	b.n	80058f8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d102      	bne.n	80058f8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2208      	movs	r2, #8
 80058f6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7ff ff1b 	bl	8005734 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	771a      	strb	r2, [r3, #28]
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a29      	ldr	r2, [pc, #164]	@ (80059c4 <TIM_Base_SetConfig+0xb8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00b      	beq.n	800593c <TIM_Base_SetConfig+0x30>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800592a:	d007      	beq.n	800593c <TIM_Base_SetConfig+0x30>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a26      	ldr	r2, [pc, #152]	@ (80059c8 <TIM_Base_SetConfig+0xbc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_Base_SetConfig+0x30>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a25      	ldr	r2, [pc, #148]	@ (80059cc <TIM_Base_SetConfig+0xc0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d108      	bne.n	800594e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1c      	ldr	r2, [pc, #112]	@ (80059c4 <TIM_Base_SetConfig+0xb8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00b      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800595c:	d007      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a19      	ldr	r2, [pc, #100]	@ (80059c8 <TIM_Base_SetConfig+0xbc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a18      	ldr	r2, [pc, #96]	@ (80059cc <TIM_Base_SetConfig+0xc0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d108      	bne.n	8005980 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a07      	ldr	r2, [pc, #28]	@ (80059c4 <TIM_Base_SetConfig+0xb8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d103      	bne.n	80059b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	615a      	str	r2, [r3, #20]
}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800

080059d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	f023 0201 	bic.w	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f023 0302 	bic.w	r3, r3, #2
 8005a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a1c      	ldr	r2, [pc, #112]	@ (8005a98 <TIM_OC1_SetConfig+0xc8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d10c      	bne.n	8005a46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f023 0308 	bic.w	r3, r3, #8
 8005a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f023 0304 	bic.w	r3, r3, #4
 8005a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a13      	ldr	r2, [pc, #76]	@ (8005a98 <TIM_OC1_SetConfig+0xc8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d111      	bne.n	8005a72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	621a      	str	r2, [r3, #32]
}
 8005a8c:	bf00      	nop
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40012c00 	.word	0x40012c00

08005a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	f023 0210 	bic.w	r2, r3, #16
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	021b      	lsls	r3, r3, #8
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f023 0320 	bic.w	r3, r3, #32
 8005ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a1d      	ldr	r2, [pc, #116]	@ (8005b6c <TIM_OC2_SetConfig+0xd0>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d10d      	bne.n	8005b18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a14      	ldr	r2, [pc, #80]	@ (8005b6c <TIM_OC2_SetConfig+0xd0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d113      	bne.n	8005b48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr
 8005b6c:	40012c00 	.word	0x40012c00

08005b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0303 	bic.w	r3, r3, #3
 8005ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c40 <TIM_OC3_SetConfig+0xd0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d10d      	bne.n	8005bea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	021b      	lsls	r3, r3, #8
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a14      	ldr	r2, [pc, #80]	@ (8005c40 <TIM_OC3_SetConfig+0xd0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d113      	bne.n	8005c1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	621a      	str	r2, [r3, #32]
}
 8005c34:	bf00      	nop
 8005c36:	371c      	adds	r7, #28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40012c00 	.word	0x40012c00

08005c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	031b      	lsls	r3, r3, #12
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8005cdc <TIM_OC4_SetConfig+0x98>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d109      	bne.n	8005cb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	019b      	lsls	r3, r3, #6
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	621a      	str	r2, [r3, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr
 8005cdc:	40012c00 	.word	0x40012c00

08005ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f023 0201 	bic.w	r2, r3, #1
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f023 030a 	bic.w	r3, r3, #10
 8005d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	bf00      	nop
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr

08005d3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	f023 0210 	bic.w	r2, r3, #16
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	031b      	lsls	r3, r3, #12
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	621a      	str	r2, [r3, #32]
}
 8005d90:	bf00      	nop
 8005d92:	371c      	adds	r7, #28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr

08005d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f043 0307 	orr.w	r3, r3, #7
 8005dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	609a      	str	r2, [r3, #8]
}
 8005dc4:	bf00      	nop
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr

08005dce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b087      	sub	sp, #28
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005de8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	021a      	lsls	r2, r3, #8
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	431a      	orrs	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	609a      	str	r2, [r3, #8]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bc80      	pop	{r7}
 8005e0a:	4770      	bx	lr

08005e0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2201      	movs	r2, #1
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a1a      	ldr	r2, [r3, #32]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	401a      	ands	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a1a      	ldr	r2, [r3, #32]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f003 031f 	and.w	r3, r3, #31
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	fa01 f303 	lsl.w	r3, r1, r3
 8005e44:	431a      	orrs	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bc80      	pop	{r7}
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e046      	b.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a16      	ldr	r2, [pc, #88]	@ (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00e      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb8:	d009      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a12      	ldr	r2, [pc, #72]	@ (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d004      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a10      	ldr	r2, [pc, #64]	@ (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d10c      	bne.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr
 8005f04:	40012c00 	.word	0x40012c00
 8005f08:	40000400 	.word	0x40000400
 8005f0c:	40000800 	.word	0x40000800

08005f10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e03d      	b.n	8005fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bc80      	pop	{r7}
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e042      	b.n	800606e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d106      	bne.n	8006002 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7fc fc2f 	bl	8002860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2224      	movs	r2, #36	@ 0x24
 8006006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006018:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fe62 	bl	8006ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800602e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695a      	ldr	r2, [r3, #20]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800603e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800604e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	4613      	mov	r3, r2
 8006082:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b20      	cmp	r3, #32
 800608e:	d112      	bne.n	80060b6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <HAL_UART_Receive_DMA+0x26>
 8006096:	88fb      	ldrh	r3, [r7, #6]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e00b      	b.n	80060b8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	461a      	mov	r2, r3
 80060aa:	68b9      	ldr	r1, [r7, #8]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 fbbd 	bl	800682c <UART_Start_Receive_DMA>
 80060b2:	4603      	mov	r3, r0
 80060b4:	e000      	b.n	80060b8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80060b6:	2302      	movs	r3, #2
  }
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b0ba      	sub	sp, #232	@ 0xe8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80060fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10f      	bne.n	8006126 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d009      	beq.n	8006126 <HAL_UART_IRQHandler+0x66>
 8006112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fd22 	bl	8006b68 <UART_Receive_IT>
      return;
 8006124:	e25b      	b.n	80065de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 80de 	beq.w	80062ec <HAL_UART_IRQHandler+0x22c>
 8006130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d106      	bne.n	800614a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800613c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006140:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80d1 	beq.w	80062ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800614a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00b      	beq.n	800616e <HAL_UART_IRQHandler+0xae>
 8006156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800615a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006166:	f043 0201 	orr.w	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800616e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006172:	f003 0304 	and.w	r3, r3, #4
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00b      	beq.n	8006192 <HAL_UART_IRQHandler+0xd2>
 800617a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618a:	f043 0202 	orr.w	r2, r3, #2
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00b      	beq.n	80061b6 <HAL_UART_IRQHandler+0xf6>
 800619e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ae:	f043 0204 	orr.w	r2, r3, #4
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d011      	beq.n	80061e6 <HAL_UART_IRQHandler+0x126>
 80061c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d105      	bne.n	80061da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061de:	f043 0208 	orr.w	r2, r3, #8
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 81f2 	beq.w	80065d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <HAL_UART_IRQHandler+0x14e>
 80061fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fcad 	bl	8006b68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006218:	2b00      	cmp	r3, #0
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622a:	f003 0308 	and.w	r3, r3, #8
 800622e:	2b00      	cmp	r3, #0
 8006230:	d103      	bne.n	800623a <HAL_UART_IRQHandler+0x17a>
 8006232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006236:	2b00      	cmp	r3, #0
 8006238:	d04f      	beq.n	80062da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fbb7 	bl	80069ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d041      	beq.n	80062d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3314      	adds	r3, #20
 8006254:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006264:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006268:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800626c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3314      	adds	r3, #20
 8006276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800627a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800627e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1d9      	bne.n	800624e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d013      	beq.n	80062ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a6:	4a7e      	ldr	r2, [pc, #504]	@ (80064a0 <HAL_UART_IRQHandler+0x3e0>)
 80062a8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fd fb04 	bl	80038bc <HAL_DMA_Abort_IT>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d016      	beq.n	80062e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80062c4:	4610      	mov	r0, r2
 80062c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c8:	e00e      	b.n	80062e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f99c 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d0:	e00a      	b.n	80062e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f998 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d8:	e006      	b.n	80062e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f994 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80062e6:	e175      	b.n	80065d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e8:	bf00      	nop
    return;
 80062ea:	e173      	b.n	80065d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	f040 814f 	bne.w	8006594 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 8148 	beq.w	8006594 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006308:	f003 0310 	and.w	r3, r3, #16
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8141 	beq.w	8006594 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006312:	2300      	movs	r3, #0
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	60bb      	str	r3, [r7, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	60bb      	str	r3, [r7, #8]
 8006326:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 80b6 	beq.w	80064a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006344:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8145 	beq.w	80065d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006356:	429a      	cmp	r2, r3
 8006358:	f080 813e 	bcs.w	80065d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006362:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	2b20      	cmp	r3, #32
 800636c:	f000 8088 	beq.w	8006480 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	330c      	adds	r3, #12
 8006376:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006386:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800638a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800638e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	330c      	adds	r3, #12
 8006398:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800639c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80063a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80063b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1d9      	bne.n	8006370 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3314      	adds	r3, #20
 80063c2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80063cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3314      	adds	r3, #20
 80063dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063e0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80063e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80063e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80063ec:	e841 2300 	strex	r3, r2, [r1]
 80063f0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80063f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1e1      	bne.n	80063bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3314      	adds	r3, #20
 80063fe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006408:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800640a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800640e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3314      	adds	r3, #20
 8006418:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800641c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800641e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006422:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800642a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e3      	bne.n	80063f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2220      	movs	r2, #32
 8006434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	330c      	adds	r3, #12
 8006444:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800644e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006450:	f023 0310 	bic.w	r3, r3, #16
 8006454:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	330c      	adds	r3, #12
 800645e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006462:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006464:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006468:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1e3      	bne.n	800643e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647a:	4618      	mov	r0, r3
 800647c:	f7fd f9e2 	bl	8003844 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800648e:	b29b      	uxth	r3, r3
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	b29b      	uxth	r3, r3
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f8bf 	bl	800661a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800649c:	e09c      	b.n	80065d8 <HAL_UART_IRQHandler+0x518>
 800649e:	bf00      	nop
 80064a0:	08006a73 	.word	0x08006a73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 808e 	beq.w	80065dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80064c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 8089 	beq.w	80065dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	330c      	adds	r3, #12
 80064d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	330c      	adds	r3, #12
 80064ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80064ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80064f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064f6:	e841 2300 	strex	r3, r2, [r1]
 80064fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1e3      	bne.n	80064ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3314      	adds	r3, #20
 8006508:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	623b      	str	r3, [r7, #32]
   return(result);
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	f023 0301 	bic.w	r3, r3, #1
 8006518:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3314      	adds	r3, #20
 8006522:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006526:	633a      	str	r2, [r7, #48]	@ 0x30
 8006528:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800652c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e3      	bne.n	8006502 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	330c      	adds	r3, #12
 800654e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	e853 3f00 	ldrex	r3, [r3]
 8006556:	60fb      	str	r3, [r7, #12]
   return(result);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0310 	bic.w	r3, r3, #16
 800655e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	330c      	adds	r3, #12
 8006568:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800656c:	61fa      	str	r2, [r7, #28]
 800656e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	69b9      	ldr	r1, [r7, #24]
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	617b      	str	r3, [r7, #20]
   return(result);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e3      	bne.n	8006548 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006586:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f844 	bl	800661a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006592:	e023      	b.n	80065dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800659c:	2b00      	cmp	r3, #0
 800659e:	d009      	beq.n	80065b4 <HAL_UART_IRQHandler+0x4f4>
 80065a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fa74 	bl	8006a9a <UART_Transmit_IT>
    return;
 80065b2:	e014      	b.n	80065de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00e      	beq.n	80065de <HAL_UART_IRQHandler+0x51e>
 80065c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d008      	beq.n	80065de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fab3 	bl	8006b38 <UART_EndTransmit_IT>
    return;
 80065d2:	e004      	b.n	80065de <HAL_UART_IRQHandler+0x51e>
    return;
 80065d4:	bf00      	nop
 80065d6:	e002      	b.n	80065de <HAL_UART_IRQHandler+0x51e>
      return;
 80065d8:	bf00      	nop
 80065da:	e000      	b.n	80065de <HAL_UART_IRQHandler+0x51e>
      return;
 80065dc:	bf00      	nop
  }
}
 80065de:	37e8      	adds	r7, #232	@ 0xe8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr

080065f6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr

08006608 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	bc80      	pop	{r7}
 8006618:	4770      	bx	lr

0800661a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	460b      	mov	r3, r1
 8006624:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr

08006630 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b09c      	sub	sp, #112	@ 0x70
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0320 	and.w	r3, r3, #32
 8006648:	2b00      	cmp	r3, #0
 800664a:	d172      	bne.n	8006732 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800664c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800664e:	2200      	movs	r2, #0
 8006650:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	330c      	adds	r3, #12
 8006658:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006668:	66bb      	str	r3, [r7, #104]	@ 0x68
 800666a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	330c      	adds	r3, #12
 8006670:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006672:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006674:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006678:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e5      	bne.n	8006652 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3314      	adds	r3, #20
 800668c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006698:	f023 0301 	bic.w	r3, r3, #1
 800669c:	667b      	str	r3, [r7, #100]	@ 0x64
 800669e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3314      	adds	r3, #20
 80066a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80066a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80066a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066ae:	e841 2300 	strex	r3, r2, [r1]
 80066b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1e5      	bne.n	8006686 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3314      	adds	r3, #20
 80066c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	623b      	str	r3, [r7, #32]
   return(result);
 80066ca:	6a3b      	ldr	r3, [r7, #32]
 80066cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80066d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3314      	adds	r3, #20
 80066d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80066da:	633a      	str	r2, [r7, #48]	@ 0x30
 80066dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e5      	bne.n	80066ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80066ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066f0:	2220      	movs	r2, #32
 80066f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d119      	bne.n	8006732 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	330c      	adds	r3, #12
 8006704:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	60fb      	str	r3, [r7, #12]
   return(result);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f023 0310 	bic.w	r3, r3, #16
 8006714:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	330c      	adds	r3, #12
 800671c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800671e:	61fa      	str	r2, [r7, #28]
 8006720:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	69b9      	ldr	r1, [r7, #24]
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	617b      	str	r3, [r7, #20]
   return(result);
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e5      	bne.n	80066fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006734:	2200      	movs	r2, #0
 8006736:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006738:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800673a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800673c:	2b01      	cmp	r3, #1
 800673e:	d106      	bne.n	800674e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006740:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006742:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006744:	4619      	mov	r1, r3
 8006746:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006748:	f7ff ff67 	bl	800661a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800674c:	e002      	b.n	8006754 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800674e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006750:	f7fb fc8a 	bl	8002068 <HAL_UART_RxCpltCallback>
}
 8006754:	bf00      	nop
 8006756:	3770      	adds	r7, #112	@ 0x70
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2201      	movs	r2, #1
 800676e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006774:	2b01      	cmp	r3, #1
 8006776:	d108      	bne.n	800678a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	b29b      	uxth	r3, r3
 8006780:	4619      	mov	r1, r3
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7ff ff49 	bl	800661a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006788:	e002      	b.n	8006790 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7ff ff33 	bl	80065f6 <HAL_UART_RxHalfCpltCallback>
}
 8006790:	bf00      	nop
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bf14      	ite	ne
 80067b8:	2301      	movne	r3, #1
 80067ba:	2300      	moveq	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b21      	cmp	r3, #33	@ 0x21
 80067ca:	d108      	bne.n	80067de <UART_DMAError+0x46>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80067d8:	68b8      	ldr	r0, [r7, #8]
 80067da:	f000 f8c1 	bl	8006960 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	bf14      	ite	ne
 80067ec:	2301      	movne	r3, #1
 80067ee:	2300      	moveq	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b22      	cmp	r3, #34	@ 0x22
 80067fe:	d108      	bne.n	8006812 <UART_DMAError+0x7a>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d005      	beq.n	8006812 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2200      	movs	r2, #0
 800680a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800680c:	68b8      	ldr	r0, [r7, #8]
 800680e:	f000 f8ce 	bl	80069ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006816:	f043 0210 	orr.w	r2, r3, #16
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800681e:	68b8      	ldr	r0, [r7, #8]
 8006820:	f7ff fef2 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006824:	bf00      	nop
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b098      	sub	sp, #96	@ 0x60
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	88fa      	ldrh	r2, [r7, #6]
 8006844:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2222      	movs	r2, #34	@ 0x22
 8006850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006858:	4a3e      	ldr	r2, [pc, #248]	@ (8006954 <UART_Start_Receive_DMA+0x128>)
 800685a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006860:	4a3d      	ldr	r2, [pc, #244]	@ (8006958 <UART_Start_Receive_DMA+0x12c>)
 8006862:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006868:	4a3c      	ldr	r2, [pc, #240]	@ (800695c <UART_Start_Receive_DMA+0x130>)
 800686a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006870:	2200      	movs	r2, #0
 8006872:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006874:	f107 0308 	add.w	r3, r7, #8
 8006878:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3304      	adds	r3, #4
 8006884:	4619      	mov	r1, r3
 8006886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	88fb      	ldrh	r3, [r7, #6]
 800688c:	f7fc ff7a 	bl	8003784 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006890:	2300      	movs	r3, #0
 8006892:	613b      	str	r3, [r7, #16]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	613b      	str	r3, [r7, #16]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d019      	beq.n	80068e2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	330c      	adds	r3, #12
 80068b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	330c      	adds	r3, #12
 80068cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068ce:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80068d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80068d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80068dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e5      	bne.n	80068ae <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3314      	adds	r3, #20
 80068e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f4:	f043 0301 	orr.w	r3, r3, #1
 80068f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3314      	adds	r3, #20
 8006900:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006902:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006904:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006908:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e5      	bne.n	80068e2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3314      	adds	r3, #20
 800691c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	617b      	str	r3, [r7, #20]
   return(result);
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800692c:	653b      	str	r3, [r7, #80]	@ 0x50
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3314      	adds	r3, #20
 8006934:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006936:	627a      	str	r2, [r7, #36]	@ 0x24
 8006938:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693a:	6a39      	ldr	r1, [r7, #32]
 800693c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	61fb      	str	r3, [r7, #28]
   return(result);
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e5      	bne.n	8006916 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3760      	adds	r7, #96	@ 0x60
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	08006631 	.word	0x08006631
 8006958:	0800675d 	.word	0x0800675d
 800695c:	08006799 	.word	0x08006799

08006960 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006960:	b480      	push	{r7}
 8006962:	b089      	sub	sp, #36	@ 0x24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	330c      	adds	r3, #12
 800696e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	60bb      	str	r3, [r7, #8]
   return(result);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800697e:	61fb      	str	r3, [r7, #28]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	330c      	adds	r3, #12
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	61ba      	str	r2, [r7, #24]
 800698a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6979      	ldr	r1, [r7, #20]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	613b      	str	r3, [r7, #16]
   return(result);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e5      	bne.n	8006968 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80069a4:	bf00      	nop
 80069a6:	3724      	adds	r7, #36	@ 0x24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bc80      	pop	{r7}
 80069ac:	4770      	bx	lr

080069ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b095      	sub	sp, #84	@ 0x54
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	330c      	adds	r3, #12
 80069bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	330c      	adds	r3, #12
 80069d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80069d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e5      	bne.n	80069b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3314      	adds	r3, #20
 80069f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	f023 0301 	bic.w	r3, r3, #1
 8006a00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3314      	adds	r3, #20
 8006a08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e5      	bne.n	80069ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d119      	bne.n	8006a5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	330c      	adds	r3, #12
 8006a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f023 0310 	bic.w	r3, r3, #16
 8006a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	330c      	adds	r3, #12
 8006a44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a46:	61ba      	str	r2, [r7, #24]
 8006a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4a:	6979      	ldr	r1, [r7, #20]
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	e841 2300 	strex	r3, r2, [r1]
 8006a52:	613b      	str	r3, [r7, #16]
   return(result);
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1e5      	bne.n	8006a26 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006a68:	bf00      	nop
 8006a6a:	3754      	adds	r7, #84	@ 0x54
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr

08006a72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f7ff fdbb 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b21      	cmp	r3, #33	@ 0x21
 8006aac:	d13e      	bne.n	8006b2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ab6:	d114      	bne.n	8006ae2 <UART_Transmit_IT+0x48>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d110      	bne.n	8006ae2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ad4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	1c9a      	adds	r2, r3, #2
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	621a      	str	r2, [r3, #32]
 8006ae0:	e008      	b.n	8006af4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	1c59      	adds	r1, r3, #1
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	6211      	str	r1, [r2, #32]
 8006aec:	781a      	ldrb	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	4619      	mov	r1, r3
 8006b02:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10f      	bne.n	8006b28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	e000      	b.n	8006b2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b2c:	2302      	movs	r3, #2
  }
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr

08006b38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff fd43 	bl	80065e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08c      	sub	sp, #48	@ 0x30
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b22      	cmp	r3, #34	@ 0x22
 8006b7a:	f040 80ae 	bne.w	8006cda <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b86:	d117      	bne.n	8006bb8 <UART_Receive_IT+0x50>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d113      	bne.n	8006bb8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b90:	2300      	movs	r3, #0
 8006b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b98:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006baa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb0:	1c9a      	adds	r2, r3, #2
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	629a      	str	r2, [r3, #40]	@ 0x28
 8006bb6:	e026      	b.n	8006c06 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bca:	d007      	beq.n	8006bdc <UART_Receive_IT+0x74>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10a      	bne.n	8006bea <UART_Receive_IT+0x82>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d106      	bne.n	8006bea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	e008      	b.n	8006bfc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	4619      	mov	r1, r3
 8006c14:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d15d      	bne.n	8006cd6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0220 	bic.w	r2, r2, #32
 8006c28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	695a      	ldr	r2, [r3, #20]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 0201 	bic.w	r2, r2, #1
 8006c48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d135      	bne.n	8006ccc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	330c      	adds	r3, #12
 8006c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	613b      	str	r3, [r7, #16]
   return(result);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f023 0310 	bic.w	r3, r3, #16
 8006c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	330c      	adds	r3, #12
 8006c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c86:	623a      	str	r2, [r7, #32]
 8006c88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	69f9      	ldr	r1, [r7, #28]
 8006c8c:	6a3a      	ldr	r2, [r7, #32]
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e5      	bne.n	8006c66 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0310 	and.w	r3, r3, #16
 8006ca4:	2b10      	cmp	r3, #16
 8006ca6:	d10a      	bne.n	8006cbe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff fca8 	bl	800661a <HAL_UARTEx_RxEventCallback>
 8006cca:	e002      	b.n	8006cd2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7fb f9cb 	bl	8002068 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e002      	b.n	8006cdc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e000      	b.n	8006cdc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006cda:	2302      	movs	r3, #2
  }
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3730      	adds	r7, #48	@ 0x30
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689a      	ldr	r2, [r3, #8]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006d1e:	f023 030c 	bic.w	r3, r3, #12
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	699a      	ldr	r2, [r3, #24]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a2c      	ldr	r2, [pc, #176]	@ (8006df8 <UART_SetConfig+0x114>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d103      	bne.n	8006d54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006d4c:	f7fd fcdc 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	e002      	b.n	8006d5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d54:	f7fd fcc4 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 8006d58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	009a      	lsls	r2, r3, #2
 8006d64:	441a      	add	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d70:	4a22      	ldr	r2, [pc, #136]	@ (8006dfc <UART_SetConfig+0x118>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	0119      	lsls	r1, r3, #4
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009a      	lsls	r2, r3, #2
 8006d84:	441a      	add	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d90:	4b1a      	ldr	r3, [pc, #104]	@ (8006dfc <UART_SetConfig+0x118>)
 8006d92:	fba3 0302 	umull	r0, r3, r3, r2
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	2064      	movs	r0, #100	@ 0x64
 8006d9a:	fb00 f303 	mul.w	r3, r0, r3
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	3332      	adds	r3, #50	@ 0x32
 8006da4:	4a15      	ldr	r2, [pc, #84]	@ (8006dfc <UART_SetConfig+0x118>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	095b      	lsrs	r3, r3, #5
 8006dac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006db0:	4419      	add	r1, r3
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	4613      	mov	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	009a      	lsls	r2, r3, #2
 8006dbc:	441a      	add	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8006dfc <UART_SetConfig+0x118>)
 8006dca:	fba3 0302 	umull	r0, r3, r3, r2
 8006dce:	095b      	lsrs	r3, r3, #5
 8006dd0:	2064      	movs	r0, #100	@ 0x64
 8006dd2:	fb00 f303 	mul.w	r3, r0, r3
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	3332      	adds	r3, #50	@ 0x32
 8006ddc:	4a07      	ldr	r2, [pc, #28]	@ (8006dfc <UART_SetConfig+0x118>)
 8006dde:	fba2 2303 	umull	r2, r3, r2, r3
 8006de2:	095b      	lsrs	r3, r3, #5
 8006de4:	f003 020f 	and.w	r2, r3, #15
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	440a      	add	r2, r1
 8006dee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006df0:	bf00      	nop
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	40013800 	.word	0x40013800
 8006dfc:	51eb851f 	.word	0x51eb851f

08006e00 <memset>:
 8006e00:	4603      	mov	r3, r0
 8006e02:	4402      	add	r2, r0
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d100      	bne.n	8006e0a <memset+0xa>
 8006e08:	4770      	bx	lr
 8006e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e0e:	e7f9      	b.n	8006e04 <memset+0x4>

08006e10 <__libc_init_array>:
 8006e10:	b570      	push	{r4, r5, r6, lr}
 8006e12:	2600      	movs	r6, #0
 8006e14:	4d0c      	ldr	r5, [pc, #48]	@ (8006e48 <__libc_init_array+0x38>)
 8006e16:	4c0d      	ldr	r4, [pc, #52]	@ (8006e4c <__libc_init_array+0x3c>)
 8006e18:	1b64      	subs	r4, r4, r5
 8006e1a:	10a4      	asrs	r4, r4, #2
 8006e1c:	42a6      	cmp	r6, r4
 8006e1e:	d109      	bne.n	8006e34 <__libc_init_array+0x24>
 8006e20:	f000 f81a 	bl	8006e58 <_init>
 8006e24:	2600      	movs	r6, #0
 8006e26:	4d0a      	ldr	r5, [pc, #40]	@ (8006e50 <__libc_init_array+0x40>)
 8006e28:	4c0a      	ldr	r4, [pc, #40]	@ (8006e54 <__libc_init_array+0x44>)
 8006e2a:	1b64      	subs	r4, r4, r5
 8006e2c:	10a4      	asrs	r4, r4, #2
 8006e2e:	42a6      	cmp	r6, r4
 8006e30:	d105      	bne.n	8006e3e <__libc_init_array+0x2e>
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
 8006e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e38:	4798      	blx	r3
 8006e3a:	3601      	adds	r6, #1
 8006e3c:	e7ee      	b.n	8006e1c <__libc_init_array+0xc>
 8006e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e42:	4798      	blx	r3
 8006e44:	3601      	adds	r6, #1
 8006e46:	e7f2      	b.n	8006e2e <__libc_init_array+0x1e>
 8006e48:	08006eb0 	.word	0x08006eb0
 8006e4c:	08006eb0 	.word	0x08006eb0
 8006e50:	08006eb0 	.word	0x08006eb0
 8006e54:	08006eb4 	.word	0x08006eb4

08006e58 <_init>:
 8006e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5a:	bf00      	nop
 8006e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e5e:	bc08      	pop	{r3}
 8006e60:	469e      	mov	lr, r3
 8006e62:	4770      	bx	lr

08006e64 <_fini>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	bf00      	nop
 8006e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6a:	bc08      	pop	{r3}
 8006e6c:	469e      	mov	lr, r3
 8006e6e:	4770      	bx	lr
